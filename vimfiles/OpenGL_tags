!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
APIENTRY	.\glut.h	151;"	d
APIENTRY	.\glut.h	24;"	d
APIENTRY	.\glut.h	26;"	d
APIENTRY	.\glut.h	698;"	d
CALLBACK	.\glut.h	153;"	d
CALLBACK	.\glut.h	32;"	d
CALLBACK	.\glut.h	34;"	d
GLUTAPI	.\glut.h	123;"	d
GLUTAPI	.\glut.h	126;"	d
GLUTAPI	.\glut.h	128;"	d
GLUTAPI	.\glut.h	155;"	d
GLUTCALLBACK	.\glut.h	133;"	d
GLUTCALLBACK	.\glut.h	156;"	d
GLUT_ACCUM	.\glut.h	232;"	d
GLUT_ACTIVE_ALT	.\glut.h	446;"	d
GLUT_ACTIVE_CTRL	.\glut.h	445;"	d
GLUT_ACTIVE_SHIFT	.\glut.h	444;"	d
GLUT_ALPHA	.\glut.h	233;"	d
GLUT_APIENTRY_DEFINED	.\glut.h	152;"	d
GLUT_APIENTRY_DEFINED	.\glut.h	22;"	d
GLUT_APIENTRY_DEFINED	.\glut.h	697;"	d
GLUT_API_VERSION	.\glut.h	183;"	d
GLUT_BITMAP_8_BY_13	.\glut.h	309;"	d
GLUT_BITMAP_8_BY_13	.\glut.h	337;"	d
GLUT_BITMAP_9_BY_15	.\glut.h	308;"	d
GLUT_BITMAP_9_BY_15	.\glut.h	336;"	d
GLUT_BITMAP_HELVETICA_10	.\glut.h	313;"	d
GLUT_BITMAP_HELVETICA_10	.\glut.h	341;"	d
GLUT_BITMAP_HELVETICA_12	.\glut.h	314;"	d
GLUT_BITMAP_HELVETICA_12	.\glut.h	342;"	d
GLUT_BITMAP_HELVETICA_18	.\glut.h	315;"	d
GLUT_BITMAP_HELVETICA_18	.\glut.h	343;"	d
GLUT_BITMAP_TIMES_ROMAN_10	.\glut.h	310;"	d
GLUT_BITMAP_TIMES_ROMAN_10	.\glut.h	338;"	d
GLUT_BITMAP_TIMES_ROMAN_24	.\glut.h	311;"	d
GLUT_BITMAP_TIMES_ROMAN_24	.\glut.h	339;"	d
GLUT_BLUE	.\glut.h	300;"	d
GLUT_CURSOR_BOTTOM_LEFT_CORNER	.\glut.h	472;"	d
GLUT_CURSOR_BOTTOM_RIGHT_CORNER	.\glut.h	471;"	d
GLUT_CURSOR_BOTTOM_SIDE	.\glut.h	466;"	d
GLUT_CURSOR_CROSSHAIR	.\glut.h	460;"	d
GLUT_CURSOR_CYCLE	.\glut.h	456;"	d
GLUT_CURSOR_DESTROY	.\glut.h	454;"	d
GLUT_CURSOR_FULL_CROSSHAIR	.\glut.h	478;"	d
GLUT_CURSOR_HELP	.\glut.h	455;"	d
GLUT_CURSOR_INFO	.\glut.h	453;"	d
GLUT_CURSOR_INHERIT	.\glut.h	474;"	d
GLUT_CURSOR_LEFT_ARROW	.\glut.h	451;"	d
GLUT_CURSOR_LEFT_RIGHT	.\glut.h	463;"	d
GLUT_CURSOR_LEFT_SIDE	.\glut.h	467;"	d
GLUT_CURSOR_NONE	.\glut.h	476;"	d
GLUT_CURSOR_RIGHT_ARROW	.\glut.h	450;"	d
GLUT_CURSOR_RIGHT_SIDE	.\glut.h	468;"	d
GLUT_CURSOR_SPRAY	.\glut.h	457;"	d
GLUT_CURSOR_TEXT	.\glut.h	459;"	d
GLUT_CURSOR_TOP_LEFT_CORNER	.\glut.h	469;"	d
GLUT_CURSOR_TOP_RIGHT_CORNER	.\glut.h	470;"	d
GLUT_CURSOR_TOP_SIDE	.\glut.h	465;"	d
GLUT_CURSOR_UP_DOWN	.\glut.h	462;"	d
GLUT_CURSOR_WAIT	.\glut.h	458;"	d
GLUT_DEFINED__CRTIMP	.\glut.h	118;"	d
GLUT_DEFINED__CRTIMP	.\glut.h	712;"	d
GLUT_DEFINED___CDECL	.\glut.h	104;"	d
GLUT_DEFINED___CDECL	.\glut.h	707;"	d
GLUT_DEPTH	.\glut.h	234;"	d
GLUT_DEVICE_IGNORE_KEY_REPEAT	.\glut.h	407;"	d
GLUT_DEVICE_KEY_REPEAT	.\glut.h	408;"	d
GLUT_DISPLAY_MODE_POSSIBLE	.\glut.h	380;"	d
GLUT_DOUBLE	.\glut.h	231;"	d
GLUT_DOWN	.\glut.h	250;"	d
GLUT_ELAPSED_TIME	.\glut.h	387;"	d
GLUT_ENTERED	.\glut.h	281;"	d
GLUT_FULLY_COVERED	.\glut.h	295;"	d
GLUT_FULLY_RETAINED	.\glut.h	293;"	d
GLUT_GAME_MODE_ACTIVE	.\glut.h	677;"	d
GLUT_GAME_MODE_DISPLAY_CHANGED	.\glut.h	683;"	d
GLUT_GAME_MODE_HEIGHT	.\glut.h	680;"	d
GLUT_GAME_MODE_PIXEL_DEPTH	.\glut.h	681;"	d
GLUT_GAME_MODE_POSSIBLE	.\glut.h	678;"	d
GLUT_GAME_MODE_REFRESH_RATE	.\glut.h	682;"	d
GLUT_GAME_MODE_WIDTH	.\glut.h	679;"	d
GLUT_GREEN	.\glut.h	299;"	d
GLUT_HAS_DIAL_AND_BUTTON_BOX	.\glut.h	398;"	d
GLUT_HAS_JOYSTICK	.\glut.h	409;"	d
GLUT_HAS_KEYBOARD	.\glut.h	395;"	d
GLUT_HAS_MOUSE	.\glut.h	396;"	d
GLUT_HAS_OVERLAY	.\glut.h	420;"	d
GLUT_HAS_SPACEBALL	.\glut.h	397;"	d
GLUT_HAS_TABLET	.\glut.h	399;"	d
GLUT_HIDDEN	.\glut.h	292;"	d
GLUT_INDEX	.\glut.h	229;"	d
GLUT_INIT_DISPLAY_MODE	.\glut.h	385;"	d
GLUT_INIT_WINDOW_HEIGHT	.\glut.h	384;"	d
GLUT_INIT_WINDOW_WIDTH	.\glut.h	383;"	d
GLUT_INIT_WINDOW_X	.\glut.h	381;"	d
GLUT_INIT_WINDOW_Y	.\glut.h	382;"	d
GLUT_JOYSTICK_AXES	.\glut.h	412;"	d
GLUT_JOYSTICK_BUTTONS	.\glut.h	411;"	d
GLUT_JOYSTICK_BUTTON_A	.\glut.h	666;"	d
GLUT_JOYSTICK_BUTTON_B	.\glut.h	667;"	d
GLUT_JOYSTICK_BUTTON_C	.\glut.h	668;"	d
GLUT_JOYSTICK_BUTTON_D	.\glut.h	669;"	d
GLUT_JOYSTICK_POLL_RATE	.\glut.h	413;"	d
GLUT_KEY_DOWN	.\glut.h	271;"	d
GLUT_KEY_END	.\glut.h	275;"	d
GLUT_KEY_F1	.\glut.h	255;"	d
GLUT_KEY_F10	.\glut.h	264;"	d
GLUT_KEY_F11	.\glut.h	265;"	d
GLUT_KEY_F12	.\glut.h	266;"	d
GLUT_KEY_F2	.\glut.h	256;"	d
GLUT_KEY_F3	.\glut.h	257;"	d
GLUT_KEY_F4	.\glut.h	258;"	d
GLUT_KEY_F5	.\glut.h	259;"	d
GLUT_KEY_F6	.\glut.h	260;"	d
GLUT_KEY_F7	.\glut.h	261;"	d
GLUT_KEY_F8	.\glut.h	262;"	d
GLUT_KEY_F9	.\glut.h	263;"	d
GLUT_KEY_HOME	.\glut.h	274;"	d
GLUT_KEY_INSERT	.\glut.h	276;"	d
GLUT_KEY_LEFT	.\glut.h	268;"	d
GLUT_KEY_PAGE_DOWN	.\glut.h	273;"	d
GLUT_KEY_PAGE_UP	.\glut.h	272;"	d
GLUT_KEY_REPEAT_DEFAULT	.\glut.h	663;"	d
GLUT_KEY_REPEAT_OFF	.\glut.h	661;"	d
GLUT_KEY_REPEAT_ON	.\glut.h	662;"	d
GLUT_KEY_RIGHT	.\glut.h	270;"	d
GLUT_KEY_UP	.\glut.h	269;"	d
GLUT_LAYER_IN_USE	.\glut.h	419;"	d
GLUT_LEFT	.\glut.h	280;"	d
GLUT_LEFT_BUTTON	.\glut.h	245;"	d
GLUT_LUMINANCE	.\glut.h	241;"	d
GLUT_MENU_IN_USE	.\glut.h	285;"	d
GLUT_MENU_NOT_IN_USE	.\glut.h	284;"	d
GLUT_MENU_NUM_ITEMS	.\glut.h	379;"	d
GLUT_MIDDLE_BUTTON	.\glut.h	246;"	d
GLUT_MULTISAMPLE	.\glut.h	237;"	d
GLUT_NORMAL	.\glut.h	440;"	d
GLUT_NORMAL_DAMAGED	.\glut.h	422;"	d
GLUT_NOT_VISIBLE	.\glut.h	288;"	d
GLUT_NUM_BUTTON_BOX_BUTTONS	.\glut.h	402;"	d
GLUT_NUM_DIALS	.\glut.h	403;"	d
GLUT_NUM_MOUSE_BUTTONS	.\glut.h	400;"	d
GLUT_NUM_SPACEBALL_BUTTONS	.\glut.h	401;"	d
GLUT_NUM_TABLET_BUTTONS	.\glut.h	404;"	d
GLUT_OVERLAY	.\glut.h	441;"	d
GLUT_OVERLAY_DAMAGED	.\glut.h	423;"	d
GLUT_OVERLAY_POSSIBLE	.\glut.h	418;"	d
GLUT_OWNS_JOYSTICK	.\glut.h	410;"	d
GLUT_PARTIALLY_RETAINED	.\glut.h	294;"	d
GLUT_RED	.\glut.h	298;"	d
GLUT_RGB	.\glut.h	227;"	d
GLUT_RGBA	.\glut.h	228;"	d
GLUT_RIGHT_BUTTON	.\glut.h	247;"	d
GLUT_SCREEN_HEIGHT	.\glut.h	376;"	d
GLUT_SCREEN_HEIGHT_MM	.\glut.h	378;"	d
GLUT_SCREEN_WIDTH	.\glut.h	375;"	d
GLUT_SCREEN_WIDTH_MM	.\glut.h	377;"	d
GLUT_SINGLE	.\glut.h	230;"	d
GLUT_STENCIL	.\glut.h	235;"	d
GLUT_STEREO	.\glut.h	238;"	d
GLUT_STROKE_MONO_ROMAN	.\glut.h	305;"	d
GLUT_STROKE_MONO_ROMAN	.\glut.h	324;"	d
GLUT_STROKE_ROMAN	.\glut.h	304;"	d
GLUT_STROKE_ROMAN	.\glut.h	323;"	d
GLUT_TRANSPARENT_INDEX	.\glut.h	421;"	d
GLUT_UP	.\glut.h	251;"	d
GLUT_VIDEO_RESIZE_HEIGHT	.\glut.h	436;"	d
GLUT_VIDEO_RESIZE_HEIGHT_DELTA	.\glut.h	432;"	d
GLUT_VIDEO_RESIZE_IN_USE	.\glut.h	428;"	d
GLUT_VIDEO_RESIZE_POSSIBLE	.\glut.h	427;"	d
GLUT_VIDEO_RESIZE_WIDTH	.\glut.h	435;"	d
GLUT_VIDEO_RESIZE_WIDTH_DELTA	.\glut.h	431;"	d
GLUT_VIDEO_RESIZE_X	.\glut.h	433;"	d
GLUT_VIDEO_RESIZE_X_DELTA	.\glut.h	429;"	d
GLUT_VIDEO_RESIZE_Y	.\glut.h	434;"	d
GLUT_VIDEO_RESIZE_Y_DELTA	.\glut.h	430;"	d
GLUT_VISIBLE	.\glut.h	289;"	d
GLUT_WINDOW_ACCUM_ALPHA_SIZE	.\glut.h	362;"	d
GLUT_WINDOW_ACCUM_BLUE_SIZE	.\glut.h	361;"	d
GLUT_WINDOW_ACCUM_GREEN_SIZE	.\glut.h	360;"	d
GLUT_WINDOW_ACCUM_RED_SIZE	.\glut.h	359;"	d
GLUT_WINDOW_ALPHA_SIZE	.\glut.h	358;"	d
GLUT_WINDOW_BLUE_SIZE	.\glut.h	357;"	d
GLUT_WINDOW_BUFFER_SIZE	.\glut.h	352;"	d
GLUT_WINDOW_COLORMAP_SIZE	.\glut.h	367;"	d
GLUT_WINDOW_CURSOR	.\glut.h	373;"	d
GLUT_WINDOW_DEPTH_SIZE	.\glut.h	354;"	d
GLUT_WINDOW_DOUBLEBUFFER	.\glut.h	363;"	d
GLUT_WINDOW_FORMAT_ID	.\glut.h	390;"	d
GLUT_WINDOW_GREEN_SIZE	.\glut.h	356;"	d
GLUT_WINDOW_HEIGHT	.\glut.h	351;"	d
GLUT_WINDOW_NUM_CHILDREN	.\glut.h	366;"	d
GLUT_WINDOW_NUM_SAMPLES	.\glut.h	369;"	d
GLUT_WINDOW_PARENT	.\glut.h	365;"	d
GLUT_WINDOW_RED_SIZE	.\glut.h	355;"	d
GLUT_WINDOW_RGBA	.\glut.h	364;"	d
GLUT_WINDOW_STENCIL_SIZE	.\glut.h	353;"	d
GLUT_WINDOW_STEREO	.\glut.h	370;"	d
GLUT_WINDOW_WIDTH	.\glut.h	350;"	d
GLUT_WINDOW_X	.\glut.h	348;"	d
GLUT_WINDOW_Y	.\glut.h	349;"	d
GLUT_WINGDIAPI_DEFINED	.\glut.h	44;"	d
GLUT_WINGDIAPI_DEFINED	.\glut.h	702;"	d
GLUT_XLIB_IMPLEMENTATION	.\glut.h	223;"	d
GLU_AUTO_LOAD_MATRIX	.\GLU.h	490;"	d
GLU_BEGIN	.\GLU.h	573;"	d
GLU_CCW	.\GLU.h	567;"	d
GLU_CULLING	.\GLU.h	491;"	d
GLU_CW	.\GLU.h	566;"	d
GLU_DISPLAY_MODE	.\GLU.h	493;"	d
GLU_DOMAIN_DISTANCE	.\GLU.h	502;"	d
GLU_EDGE_FLAG	.\GLU.h	577;"	d
GLU_END	.\GLU.h	575;"	d
GLU_ERROR	.\GLU.h	576;"	d
GLU_EXTENSIONS	.\GLU.h	401;"	d
GLU_EXTERIOR	.\GLU.h	569;"	d
GLU_FALSE	.\GLU.h	405;"	d
GLU_FILL	.\GLU.h	418;"	d
GLU_FLAT	.\GLU.h	412;"	d
GLU_INCOMPATIBLE_GL_VERSION	.\GLU.h	397;"	d
GLU_INSIDE	.\GLU.h	423;"	d
GLU_INTERIOR	.\GLU.h	568;"	d
GLU_INVALID_ENUM	.\GLU.h	394;"	d
GLU_INVALID_VALUE	.\GLU.h	395;"	d
GLU_LINE	.\GLU.h	417;"	d
GLU_MAP1_TRIM_2	.\GLU.h	506;"	d
GLU_MAP1_TRIM_3	.\GLU.h	507;"	d
GLU_NONE	.\GLU.h	413;"	d
GLU_NURBS_ERROR1	.\GLU.h	518;"	d
GLU_NURBS_ERROR10	.\GLU.h	527;"	d
GLU_NURBS_ERROR11	.\GLU.h	528;"	d
GLU_NURBS_ERROR12	.\GLU.h	529;"	d
GLU_NURBS_ERROR13	.\GLU.h	530;"	d
GLU_NURBS_ERROR14	.\GLU.h	531;"	d
GLU_NURBS_ERROR15	.\GLU.h	532;"	d
GLU_NURBS_ERROR16	.\GLU.h	533;"	d
GLU_NURBS_ERROR17	.\GLU.h	534;"	d
GLU_NURBS_ERROR18	.\GLU.h	535;"	d
GLU_NURBS_ERROR19	.\GLU.h	536;"	d
GLU_NURBS_ERROR2	.\GLU.h	519;"	d
GLU_NURBS_ERROR20	.\GLU.h	537;"	d
GLU_NURBS_ERROR21	.\GLU.h	538;"	d
GLU_NURBS_ERROR22	.\GLU.h	539;"	d
GLU_NURBS_ERROR23	.\GLU.h	540;"	d
GLU_NURBS_ERROR24	.\GLU.h	541;"	d
GLU_NURBS_ERROR25	.\GLU.h	542;"	d
GLU_NURBS_ERROR26	.\GLU.h	543;"	d
GLU_NURBS_ERROR27	.\GLU.h	544;"	d
GLU_NURBS_ERROR28	.\GLU.h	545;"	d
GLU_NURBS_ERROR29	.\GLU.h	546;"	d
GLU_NURBS_ERROR3	.\GLU.h	520;"	d
GLU_NURBS_ERROR30	.\GLU.h	547;"	d
GLU_NURBS_ERROR31	.\GLU.h	548;"	d
GLU_NURBS_ERROR32	.\GLU.h	549;"	d
GLU_NURBS_ERROR33	.\GLU.h	550;"	d
GLU_NURBS_ERROR34	.\GLU.h	551;"	d
GLU_NURBS_ERROR35	.\GLU.h	552;"	d
GLU_NURBS_ERROR36	.\GLU.h	553;"	d
GLU_NURBS_ERROR37	.\GLU.h	554;"	d
GLU_NURBS_ERROR4	.\GLU.h	521;"	d
GLU_NURBS_ERROR5	.\GLU.h	522;"	d
GLU_NURBS_ERROR6	.\GLU.h	523;"	d
GLU_NURBS_ERROR7	.\GLU.h	524;"	d
GLU_NURBS_ERROR8	.\GLU.h	525;"	d
GLU_NURBS_ERROR9	.\GLU.h	526;"	d
GLU_OUTLINE_PATCH	.\GLU.h	512;"	d
GLU_OUTLINE_POLYGON	.\GLU.h	511;"	d
GLU_OUTSIDE	.\GLU.h	422;"	d
GLU_OUT_OF_MEMORY	.\GLU.h	396;"	d
GLU_PARAMETRIC_ERROR	.\GLU.h	501;"	d
GLU_PARAMETRIC_TOLERANCE	.\GLU.h	494;"	d
GLU_PATH_LENGTH	.\GLU.h	500;"	d
GLU_POINT	.\GLU.h	416;"	d
GLU_SAMPLING_METHOD	.\GLU.h	495;"	d
GLU_SAMPLING_TOLERANCE	.\GLU.h	492;"	d
GLU_SILHOUETTE	.\GLU.h	419;"	d
GLU_SMOOTH	.\GLU.h	411;"	d
GLU_TESS_BEGIN	.\GLU.h	446;"	d
GLU_TESS_BEGIN_DATA	.\GLU.h	455;"	d
GLU_TESS_BOUNDARY_ONLY	.\GLU.h	435;"	d
GLU_TESS_COMBINE	.\GLU.h	451;"	d
GLU_TESS_COMBINE_DATA	.\GLU.h	464;"	d
GLU_TESS_COORD_TOO_LARGE	.\GLU.h	484;"	d
GLU_TESS_EDGE_FLAG	.\GLU.h	450;"	d
GLU_TESS_EDGE_FLAG_DATA	.\GLU.h	462;"	d
GLU_TESS_END	.\GLU.h	448;"	d
GLU_TESS_END_DATA	.\GLU.h	459;"	d
GLU_TESS_ERROR	.\GLU.h	449;"	d
GLU_TESS_ERROR1	.\GLU.h	471;"	d
GLU_TESS_ERROR2	.\GLU.h	472;"	d
GLU_TESS_ERROR3	.\GLU.h	473;"	d
GLU_TESS_ERROR4	.\GLU.h	474;"	d
GLU_TESS_ERROR5	.\GLU.h	475;"	d
GLU_TESS_ERROR6	.\GLU.h	476;"	d
GLU_TESS_ERROR7	.\GLU.h	477;"	d
GLU_TESS_ERROR8	.\GLU.h	478;"	d
GLU_TESS_ERROR_DATA	.\GLU.h	460;"	d
GLU_TESS_MAX_COORD	.\GLU.h	431;"	d
GLU_TESS_MISSING_BEGIN_CONTOUR	.\GLU.h	481;"	d
GLU_TESS_MISSING_BEGIN_POLYGON	.\GLU.h	480;"	d
GLU_TESS_MISSING_END_CONTOUR	.\GLU.h	483;"	d
GLU_TESS_MISSING_END_POLYGON	.\GLU.h	482;"	d
GLU_TESS_NEED_COMBINE_CALLBACK	.\GLU.h	485;"	d
GLU_TESS_TOLERANCE	.\GLU.h	436;"	d
GLU_TESS_VERTEX	.\GLU.h	447;"	d
GLU_TESS_VERTEX_DATA	.\GLU.h	457;"	d
GLU_TESS_WINDING_ABS_GEQ_TWO	.\GLU.h	443;"	d
GLU_TESS_WINDING_NEGATIVE	.\GLU.h	442;"	d
GLU_TESS_WINDING_NONZERO	.\GLU.h	440;"	d
GLU_TESS_WINDING_ODD	.\GLU.h	439;"	d
GLU_TESS_WINDING_POSITIVE	.\GLU.h	441;"	d
GLU_TESS_WINDING_RULE	.\GLU.h	434;"	d
GLU_TRUE	.\GLU.h	404;"	d
GLU_UNKNOWN	.\GLU.h	570;"	d
GLU_U_STEP	.\GLU.h	496;"	d
GLU_VERSION	.\GLU.h	400;"	d
GLU_VERSION_1_1	.\GLU.h	390;"	d
GLU_VERSION_1_2	.\GLU.h	391;"	d
GLU_VERTEX	.\GLU.h	574;"	d
GLU_V_STEP	.\GLU.h	497;"	d
GLUnurbs	.\GLU.h	/^typedef struct GLUnurbs GLUnurbs;$/;"	t	typeref:struct:GLUnurbs
GLUnurbsErrorProc	.\GLU.h	/^typedef void (CALLBACK* GLUnurbsErrorProc)   (GLenum);$/;"	t
GLUnurbsObj	.\GLU.h	/^typedef class GLUnurbs GLUnurbsObj;$/;"	t	typeref:class:GLUnurbs
GLUnurbsObj	.\GLU.h	/^typedef struct GLUnurbs GLUnurbsObj;$/;"	t	typeref:struct:GLUnurbs
GLUquadric	.\GLU.h	/^typedef struct GLUquadric GLUquadric;$/;"	t	typeref:struct:GLUquadric
GLUquadricErrorProc	.\GLU.h	/^typedef void (CALLBACK* GLUquadricErrorProc) (GLenum);$/;"	t
GLUquadricObj	.\GLU.h	/^typedef class GLUquadric GLUquadricObj;$/;"	t	typeref:class:GLUquadric
GLUquadricObj	.\GLU.h	/^typedef struct GLUquadric GLUquadricObj;$/;"	t	typeref:struct:GLUquadric
GLUtessBeginDataProc	.\GLU.h	/^typedef void (CALLBACK* GLUtessBeginDataProc)    (GLenum, void *);$/;"	t
GLUtessBeginProc	.\GLU.h	/^typedef void (CALLBACK* GLUtessBeginProc)        (GLenum);$/;"	t
GLUtessCombineDataProc	.\GLU.h	/^typedef void (CALLBACK* GLUtessCombineDataProc)  (GLdouble[3],$/;"	t
GLUtessCombineProc	.\GLU.h	/^typedef void (CALLBACK* GLUtessCombineProc)      (GLdouble[3],$/;"	t
GLUtessEdgeFlagDataProc	.\GLU.h	/^typedef void (CALLBACK* GLUtessEdgeFlagDataProc) (GLboolean, void *);$/;"	t
GLUtessEdgeFlagProc	.\GLU.h	/^typedef void (CALLBACK* GLUtessEdgeFlagProc)     (GLboolean);$/;"	t
GLUtessEndDataProc	.\GLU.h	/^typedef void (CALLBACK* GLUtessEndDataProc)      (void *);$/;"	t
GLUtessEndProc	.\GLU.h	/^typedef void (CALLBACK* GLUtessEndProc)          (void);$/;"	t
GLUtessErrorDataProc	.\GLU.h	/^typedef void (CALLBACK* GLUtessErrorDataProc)    (GLenum, void *);$/;"	t
GLUtessErrorProc	.\GLU.h	/^typedef void (CALLBACK* GLUtessErrorProc)        (GLenum);$/;"	t
GLUtessVertexDataProc	.\GLU.h	/^typedef void (CALLBACK* GLUtessVertexDataProc)   (void *, void *);$/;"	t
GLUtessVertexProc	.\GLU.h	/^typedef void (CALLBACK* GLUtessVertexProc)       (void *);$/;"	t
GLUtesselator	.\GLU.h	/^typedef struct GLUtesselator GLUtesselator;$/;"	t	typeref:struct:GLUtesselator
GLUtesselatorObj	.\GLU.h	/^typedef class GLUtesselator GLUtesselatorObj;$/;"	t	typeref:class:GLUtesselator
GLUtesselatorObj	.\GLU.h	/^typedef struct GLUtesselator GLUtesselatorObj;$/;"	t	typeref:struct:GLUtesselator
GLUtriangulatorObj	.\GLU.h	/^typedef class GLUtesselator GLUtriangulatorObj;$/;"	t	typeref:class:GLUtesselator
GLUtriangulatorObj	.\GLU.h	/^typedef struct GLUtesselator GLUtriangulatorObj;$/;"	t	typeref:struct:GLUtesselator
GL_2D	.\GL.h	307;"	d
GL_2_BYTES	.\GL.h	198;"	d
GL_3D	.\GL.h	308;"	d
GL_3D_COLOR	.\GL.h	309;"	d
GL_3D_COLOR_TEXTURE	.\GL.h	310;"	d
GL_3_BYTES	.\GL.h	199;"	d
GL_4D_COLOR_TEXTURE	.\GL.h	311;"	d
GL_4_BYTES	.\GL.h	200;"	d
GL_ACCUM	.\GL.h	65;"	d
GL_ACCUM_ALPHA_BITS	.\GL.h	544;"	d
GL_ACCUM_BLUE_BITS	.\GL.h	543;"	d
GL_ACCUM_BUFFER_BIT	.\GL.h	91;"	d
GL_ACCUM_CLEAR_VALUE	.\GL.h	419;"	d
GL_ACCUM_GREEN_BITS	.\GL.h	542;"	d
GL_ACCUM_RED_BITS	.\GL.h	541;"	d
GL_ADD	.\GL.h	69;"	d
GL_ALL_ATTRIB_BITS	.\GL.h	102;"	d
GL_ALPHA	.\GL.h	783;"	d
GL_ALPHA12	.\GL.h	980;"	d
GL_ALPHA16	.\GL.h	981;"	d
GL_ALPHA4	.\GL.h	978;"	d
GL_ALPHA8	.\GL.h	979;"	d
GL_ALPHA_BIAS	.\GL.h	518;"	d
GL_ALPHA_BITS	.\GL.h	538;"	d
GL_ALPHA_SCALE	.\GL.h	517;"	d
GL_ALPHA_TEST	.\GL.h	440;"	d
GL_ALPHA_TEST_FUNC	.\GL.h	441;"	d
GL_ALPHA_TEST_REF	.\GL.h	442;"	d
GL_ALWAYS	.\GL.h	79;"	d
GL_AMBIENT	.\GL.h	655;"	d
GL_AMBIENT_AND_DIFFUSE	.\GL.h	744;"	d
GL_AND	.\GL.h	700;"	d
GL_AND_INVERTED	.\GL.h	703;"	d
GL_AND_REVERSE	.\GL.h	701;"	d
GL_ATTRIB_STACK_DEPTH	.\GL.h	438;"	d
GL_AUTO_NORMAL	.\GL.h	546;"	d
GL_AUX0	.\GL.h	224;"	d
GL_AUX1	.\GL.h	225;"	d
GL_AUX2	.\GL.h	226;"	d
GL_AUX3	.\GL.h	227;"	d
GL_AUX_BUFFERS	.\GL.h	450;"	d
GL_BACK	.\GL.h	220;"	d
GL_BACK_LEFT	.\GL.h	217;"	d
GL_BACK_RIGHT	.\GL.h	218;"	d
GL_BGRA_EXT	.\GL.h	1114;"	d
GL_BGR_EXT	.\GL.h	1113;"	d
GL_BITMAP	.\GL.h	832;"	d
GL_BITMAP_TOKEN	.\GL.h	318;"	d
GL_BLEND	.\GL.h	446;"	d
GL_BLEND_DST	.\GL.h	444;"	d
GL_BLEND_SRC	.\GL.h	445;"	d
GL_BLUE	.\GL.h	782;"	d
GL_BLUE_BIAS	.\GL.h	516;"	d
GL_BLUE_BITS	.\GL.h	537;"	d
GL_BLUE_SCALE	.\GL.h	515;"	d
GL_BYTE	.\GL.h	191;"	d
GL_C3F_V3F	.\GL.h	1057;"	d
GL_C4F_N3F_V3F	.\GL.h	1059;"	d
GL_C4UB_V2F	.\GL.h	1055;"	d
GL_C4UB_V3F	.\GL.h	1056;"	d
GL_CCW	.\GL.h	339;"	d
GL_CLAMP	.\GL.h	956;"	d
GL_CLEAR	.\GL.h	699;"	d
GL_CLIENT_ALL_ATTRIB_BITS	.\GL.h	968;"	d
GL_CLIENT_ATTRIB_STACK_DEPTH	.\GL.h	439;"	d
GL_CLIENT_PIXEL_STORE_BIT	.\GL.h	966;"	d
GL_CLIENT_VERTEX_ARRAY_BIT	.\GL.h	967;"	d
GL_CLIP_PLANE0	.\GL.h	156;"	d
GL_CLIP_PLANE1	.\GL.h	157;"	d
GL_CLIP_PLANE2	.\GL.h	158;"	d
GL_CLIP_PLANE3	.\GL.h	159;"	d
GL_CLIP_PLANE4	.\GL.h	160;"	d
GL_CLIP_PLANE5	.\GL.h	161;"	d
GL_COEFF	.\GL.h	342;"	d
GL_COLOR	.\GL.h	772;"	d
GL_COLOR_ARRAY	.\GL.h	1029;"	d
GL_COLOR_ARRAY_COUNT_EXT	.\GL.h	1094;"	d
GL_COLOR_ARRAY_EXT	.\GL.h	1080;"	d
GL_COLOR_ARRAY_POINTER	.\GL.h	1049;"	d
GL_COLOR_ARRAY_POINTER_EXT	.\GL.h	1106;"	d
GL_COLOR_ARRAY_SIZE	.\GL.h	1038;"	d
GL_COLOR_ARRAY_SIZE_EXT	.\GL.h	1091;"	d
GL_COLOR_ARRAY_STRIDE	.\GL.h	1040;"	d
GL_COLOR_ARRAY_STRIDE_EXT	.\GL.h	1093;"	d
GL_COLOR_ARRAY_TYPE	.\GL.h	1039;"	d
GL_COLOR_ARRAY_TYPE_EXT	.\GL.h	1092;"	d
GL_COLOR_BUFFER_BIT	.\GL.h	96;"	d
GL_COLOR_CLEAR_VALUE	.\GL.h	457;"	d
GL_COLOR_INDEX	.\GL.h	777;"	d
GL_COLOR_INDEX12_EXT	.\GL.h	1132;"	d
GL_COLOR_INDEX16_EXT	.\GL.h	1133;"	d
GL_COLOR_INDEX1_EXT	.\GL.h	1128;"	d
GL_COLOR_INDEX2_EXT	.\GL.h	1129;"	d
GL_COLOR_INDEX4_EXT	.\GL.h	1130;"	d
GL_COLOR_INDEX8_EXT	.\GL.h	1131;"	d
GL_COLOR_INDEXES	.\GL.h	745;"	d
GL_COLOR_LOGIC_OP	.\GL.h	449;"	d
GL_COLOR_MATERIAL	.\GL.h	406;"	d
GL_COLOR_MATERIAL_FACE	.\GL.h	404;"	d
GL_COLOR_MATERIAL_PARAMETER	.\GL.h	405;"	d
GL_COLOR_TABLE_ALPHA_SIZE_EXT	.\GL.h	1124;"	d
GL_COLOR_TABLE_BLUE_SIZE_EXT	.\GL.h	1123;"	d
GL_COLOR_TABLE_FORMAT_EXT	.\GL.h	1119;"	d
GL_COLOR_TABLE_GREEN_SIZE_EXT	.\GL.h	1122;"	d
GL_COLOR_TABLE_INTENSITY_SIZE_EXT	.\GL.h	1126;"	d
GL_COLOR_TABLE_LUMINANCE_SIZE_EXT	.\GL.h	1125;"	d
GL_COLOR_TABLE_RED_SIZE_EXT	.\GL.h	1121;"	d
GL_COLOR_TABLE_WIDTH_EXT	.\GL.h	1120;"	d
GL_COLOR_WRITEMASK	.\GL.h	458;"	d
GL_COMPILE	.\GL.h	683;"	d
GL_COMPILE_AND_EXECUTE	.\GL.h	684;"	d
GL_CONSTANT_ATTENUATION	.\GL.h	662;"	d
GL_COPY	.\GL.h	702;"	d
GL_COPY_INVERTED	.\GL.h	711;"	d
GL_COPY_PIXEL_TOKEN	.\GL.h	320;"	d
GL_CULL_FACE	.\GL.h	396;"	d
GL_CULL_FACE_MODE	.\GL.h	397;"	d
GL_CURRENT_BIT	.\GL.h	82;"	d
GL_CURRENT_COLOR	.\GL.h	367;"	d
GL_CURRENT_INDEX	.\GL.h	368;"	d
GL_CURRENT_NORMAL	.\GL.h	369;"	d
GL_CURRENT_RASTER_COLOR	.\GL.h	371;"	d
GL_CURRENT_RASTER_DISTANCE	.\GL.h	376;"	d
GL_CURRENT_RASTER_INDEX	.\GL.h	372;"	d
GL_CURRENT_RASTER_POSITION	.\GL.h	374;"	d
GL_CURRENT_RASTER_POSITION_VALID	.\GL.h	375;"	d
GL_CURRENT_RASTER_TEXTURE_COORDS	.\GL.h	373;"	d
GL_CURRENT_TEXTURE_COORDS	.\GL.h	370;"	d
GL_CW	.\GL.h	338;"	d
GL_DECAL	.\GL.h	908;"	d
GL_DECR	.\GL.h	885;"	d
GL_DEPTH	.\GL.h	773;"	d
GL_DEPTH_BIAS	.\GL.h	520;"	d
GL_DEPTH_BITS	.\GL.h	539;"	d
GL_DEPTH_BUFFER_BIT	.\GL.h	90;"	d
GL_DEPTH_CLEAR_VALUE	.\GL.h	417;"	d
GL_DEPTH_COMPONENT	.\GL.h	779;"	d
GL_DEPTH_FUNC	.\GL.h	418;"	d
GL_DEPTH_RANGE	.\GL.h	414;"	d
GL_DEPTH_SCALE	.\GL.h	519;"	d
GL_DEPTH_TEST	.\GL.h	415;"	d
GL_DEPTH_WRITEMASK	.\GL.h	416;"	d
GL_DIFFUSE	.\GL.h	656;"	d
GL_DITHER	.\GL.h	443;"	d
GL_DOMAIN	.\GL.h	344;"	d
GL_DONT_CARE	.\GL.h	621;"	d
GL_DOUBLE	.\GL.h	201;"	d
GL_DOUBLEBUFFER	.\GL.h	461;"	d
GL_DOUBLE_EXT	.\GL.h	1110;"	d
GL_DRAW_BUFFER	.\GL.h	451;"	d
GL_DRAW_PIXEL_TOKEN	.\GL.h	319;"	d
GL_DST_ALPHA	.\GL.h	123;"	d
GL_DST_COLOR	.\GL.h	129;"	d
GL_EDGE_FLAG	.\GL.h	395;"	d
GL_EDGE_FLAG_ARRAY	.\GL.h	1032;"	d
GL_EDGE_FLAG_ARRAY_COUNT_EXT	.\GL.h	1103;"	d
GL_EDGE_FLAG_ARRAY_EXT	.\GL.h	1083;"	d
GL_EDGE_FLAG_ARRAY_POINTER	.\GL.h	1052;"	d
GL_EDGE_FLAG_ARRAY_POINTER_EXT	.\GL.h	1109;"	d
GL_EDGE_FLAG_ARRAY_STRIDE	.\GL.h	1046;"	d
GL_EDGE_FLAG_ARRAY_STRIDE_EXT	.\GL.h	1102;"	d
GL_EMISSION	.\GL.h	742;"	d
GL_ENABLE_BIT	.\GL.h	95;"	d
GL_EQUAL	.\GL.h	74;"	d
GL_EQUIV	.\GL.h	708;"	d
GL_EVAL_BIT	.\GL.h	98;"	d
GL_EXP	.\GL.h	325;"	d
GL_EXP2	.\GL.h	326;"	d
GL_EXTENSIONS	.\GL.h	892;"	d
GL_EXT_bgra	.\GL.h	1070;"	d
GL_EXT_paletted_texture	.\GL.h	1071;"	d
GL_EXT_vertex_array	.\GL.h	1069;"	d
GL_EYE_LINEAR	.\GL.h	920;"	d
GL_EYE_PLANE	.\GL.h	927;"	d
GL_FALSE	.\GL.h	139;"	d
GL_FASTEST	.\GL.h	622;"	d
GL_FEEDBACK	.\GL.h	862;"	d
GL_FEEDBACK_BUFFER_POINTER	.\GL.h	571;"	d
GL_FEEDBACK_BUFFER_SIZE	.\GL.h	572;"	d
GL_FEEDBACK_BUFFER_TYPE	.\GL.h	573;"	d
GL_FILL	.\GL.h	844;"	d
GL_FLAT	.\GL.h	866;"	d
GL_FLOAT	.\GL.h	197;"	d
GL_FOG	.\GL.h	407;"	d
GL_FOG_BIT	.\GL.h	89;"	d
GL_FOG_COLOR	.\GL.h	413;"	d
GL_FOG_DENSITY	.\GL.h	409;"	d
GL_FOG_END	.\GL.h	411;"	d
GL_FOG_HINT	.\GL.h	468;"	d
GL_FOG_INDEX	.\GL.h	408;"	d
GL_FOG_MODE	.\GL.h	412;"	d
GL_FOG_SPECULAR_TEXTURE_WIN	.\GL.h	1144;"	d
GL_FOG_START	.\GL.h	410;"	d
GL_FRONT	.\GL.h	219;"	d
GL_FRONT_AND_BACK	.\GL.h	223;"	d
GL_FRONT_FACE	.\GL.h	398;"	d
GL_FRONT_LEFT	.\GL.h	215;"	d
GL_FRONT_RIGHT	.\GL.h	216;"	d
GL_GEQUAL	.\GL.h	78;"	d
GL_GREATER	.\GL.h	76;"	d
GL_GREEN	.\GL.h	781;"	d
GL_GREEN_BIAS	.\GL.h	514;"	d
GL_GREEN_BITS	.\GL.h	536;"	d
GL_GREEN_SCALE	.\GL.h	513;"	d
GL_HINT_BIT	.\GL.h	97;"	d
GL_INCR	.\GL.h	884;"	d
GL_INDEX_ARRAY	.\GL.h	1030;"	d
GL_INDEX_ARRAY_COUNT_EXT	.\GL.h	1097;"	d
GL_INDEX_ARRAY_EXT	.\GL.h	1081;"	d
GL_INDEX_ARRAY_POINTER	.\GL.h	1050;"	d
GL_INDEX_ARRAY_POINTER_EXT	.\GL.h	1107;"	d
GL_INDEX_ARRAY_STRIDE	.\GL.h	1042;"	d
GL_INDEX_ARRAY_STRIDE_EXT	.\GL.h	1096;"	d
GL_INDEX_ARRAY_TYPE	.\GL.h	1041;"	d
GL_INDEX_ARRAY_TYPE_EXT	.\GL.h	1095;"	d
GL_INDEX_BITS	.\GL.h	534;"	d
GL_INDEX_CLEAR_VALUE	.\GL.h	455;"	d
GL_INDEX_LOGIC_OP	.\GL.h	448;"	d
GL_INDEX_MODE	.\GL.h	459;"	d
GL_INDEX_OFFSET	.\GL.h	508;"	d
GL_INDEX_SHIFT	.\GL.h	507;"	d
GL_INDEX_WRITEMASK	.\GL.h	456;"	d
GL_INT	.\GL.h	195;"	d
GL_INTENSITY	.\GL.h	992;"	d
GL_INTENSITY12	.\GL.h	995;"	d
GL_INTENSITY16	.\GL.h	996;"	d
GL_INTENSITY4	.\GL.h	993;"	d
GL_INTENSITY8	.\GL.h	994;"	d
GL_INVALID_ENUM	.\GL.h	299;"	d
GL_INVALID_OPERATION	.\GL.h	301;"	d
GL_INVALID_VALUE	.\GL.h	300;"	d
GL_INVERT	.\GL.h	709;"	d
GL_KEEP	.\GL.h	882;"	d
GL_LEFT	.\GL.h	221;"	d
GL_LEQUAL	.\GL.h	75;"	d
GL_LESS	.\GL.h	73;"	d
GL_LIGHT0	.\GL.h	645;"	d
GL_LIGHT1	.\GL.h	646;"	d
GL_LIGHT2	.\GL.h	647;"	d
GL_LIGHT3	.\GL.h	648;"	d
GL_LIGHT4	.\GL.h	649;"	d
GL_LIGHT5	.\GL.h	650;"	d
GL_LIGHT6	.\GL.h	651;"	d
GL_LIGHT7	.\GL.h	652;"	d
GL_LIGHTING	.\GL.h	399;"	d
GL_LIGHTING_BIT	.\GL.h	88;"	d
GL_LIGHT_MODEL_AMBIENT	.\GL.h	402;"	d
GL_LIGHT_MODEL_LOCAL_VIEWER	.\GL.h	400;"	d
GL_LIGHT_MODEL_TWO_SIDE	.\GL.h	401;"	d
GL_LINE	.\GL.h	843;"	d
GL_LINEAR	.\GL.h	931;"	d
GL_LINEAR_ATTENUATION	.\GL.h	663;"	d
GL_LINEAR_MIPMAP_LINEAR	.\GL.h	939;"	d
GL_LINEAR_MIPMAP_NEAREST	.\GL.h	937;"	d
GL_LINES	.\GL.h	106;"	d
GL_LINE_BIT	.\GL.h	84;"	d
GL_LINE_LOOP	.\GL.h	107;"	d
GL_LINE_RESET_TOKEN	.\GL.h	321;"	d
GL_LINE_SMOOTH	.\GL.h	381;"	d
GL_LINE_SMOOTH_HINT	.\GL.h	466;"	d
GL_LINE_STIPPLE	.\GL.h	385;"	d
GL_LINE_STIPPLE_PATTERN	.\GL.h	386;"	d
GL_LINE_STIPPLE_REPEAT	.\GL.h	387;"	d
GL_LINE_STRIP	.\GL.h	108;"	d
GL_LINE_TOKEN	.\GL.h	316;"	d
GL_LINE_WIDTH	.\GL.h	382;"	d
GL_LINE_WIDTH_GRANULARITY	.\GL.h	384;"	d
GL_LINE_WIDTH_RANGE	.\GL.h	383;"	d
GL_LIST_BASE	.\GL.h	390;"	d
GL_LIST_BIT	.\GL.h	99;"	d
GL_LIST_INDEX	.\GL.h	391;"	d
GL_LIST_MODE	.\GL.h	388;"	d
GL_LOAD	.\GL.h	66;"	d
GL_LOGIC_OP	.\GL.h	1147;"	d
GL_LOGIC_OP_MODE	.\GL.h	447;"	d
GL_LUMINANCE	.\GL.h	786;"	d
GL_LUMINANCE12	.\GL.h	984;"	d
GL_LUMINANCE12_ALPHA12	.\GL.h	990;"	d
GL_LUMINANCE12_ALPHA4	.\GL.h	989;"	d
GL_LUMINANCE16	.\GL.h	985;"	d
GL_LUMINANCE16_ALPHA16	.\GL.h	991;"	d
GL_LUMINANCE4	.\GL.h	982;"	d
GL_LUMINANCE4_ALPHA4	.\GL.h	986;"	d
GL_LUMINANCE6_ALPHA2	.\GL.h	987;"	d
GL_LUMINANCE8	.\GL.h	983;"	d
GL_LUMINANCE8_ALPHA8	.\GL.h	988;"	d
GL_LUMINANCE_ALPHA	.\GL.h	787;"	d
GL_MAP1_COLOR_4	.\GL.h	547;"	d
GL_MAP1_GRID_DOMAIN	.\GL.h	565;"	d
GL_MAP1_GRID_SEGMENTS	.\GL.h	566;"	d
GL_MAP1_INDEX	.\GL.h	548;"	d
GL_MAP1_NORMAL	.\GL.h	549;"	d
GL_MAP1_TEXTURE_COORD_1	.\GL.h	550;"	d
GL_MAP1_TEXTURE_COORD_2	.\GL.h	551;"	d
GL_MAP1_TEXTURE_COORD_3	.\GL.h	552;"	d
GL_MAP1_TEXTURE_COORD_4	.\GL.h	553;"	d
GL_MAP1_VERTEX_3	.\GL.h	554;"	d
GL_MAP1_VERTEX_4	.\GL.h	555;"	d
GL_MAP2_COLOR_4	.\GL.h	556;"	d
GL_MAP2_GRID_DOMAIN	.\GL.h	567;"	d
GL_MAP2_GRID_SEGMENTS	.\GL.h	568;"	d
GL_MAP2_INDEX	.\GL.h	557;"	d
GL_MAP2_NORMAL	.\GL.h	558;"	d
GL_MAP2_TEXTURE_COORD_1	.\GL.h	559;"	d
GL_MAP2_TEXTURE_COORD_2	.\GL.h	560;"	d
GL_MAP2_TEXTURE_COORD_3	.\GL.h	561;"	d
GL_MAP2_TEXTURE_COORD_4	.\GL.h	562;"	d
GL_MAP2_VERTEX_3	.\GL.h	563;"	d
GL_MAP2_VERTEX_4	.\GL.h	564;"	d
GL_MAP_COLOR	.\GL.h	505;"	d
GL_MAP_STENCIL	.\GL.h	506;"	d
GL_MATRIX_MODE	.\GL.h	429;"	d
GL_MAX_ATTRIB_STACK_DEPTH	.\GL.h	526;"	d
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH	.\GL.h	532;"	d
GL_MAX_CLIP_PLANES	.\GL.h	523;"	d
GL_MAX_ELEMENTS_INDICES_WIN	.\GL.h	1137;"	d
GL_MAX_ELEMENTS_VERTICES_WIN	.\GL.h	1136;"	d
GL_MAX_EVAL_ORDER	.\GL.h	521;"	d
GL_MAX_LIGHTS	.\GL.h	522;"	d
GL_MAX_LIST_NESTING	.\GL.h	389;"	d
GL_MAX_MODELVIEW_STACK_DEPTH	.\GL.h	527;"	d
GL_MAX_NAME_STACK_DEPTH	.\GL.h	528;"	d
GL_MAX_PIXEL_MAP_TABLE	.\GL.h	525;"	d
GL_MAX_PROJECTION_STACK_DEPTH	.\GL.h	529;"	d
GL_MAX_TEXTURE_SIZE	.\GL.h	524;"	d
GL_MAX_TEXTURE_STACK_DEPTH	.\GL.h	530;"	d
GL_MAX_VIEWPORT_DIMS	.\GL.h	531;"	d
GL_MODELVIEW	.\GL.h	751;"	d
GL_MODELVIEW_MATRIX	.\GL.h	435;"	d
GL_MODELVIEW_STACK_DEPTH	.\GL.h	432;"	d
GL_MODULATE	.\GL.h	907;"	d
GL_MULT	.\GL.h	68;"	d
GL_N3F_V3F	.\GL.h	1058;"	d
GL_NAME_STACK_DEPTH	.\GL.h	545;"	d
GL_NAND	.\GL.h	713;"	d
GL_NEAREST	.\GL.h	930;"	d
GL_NEAREST_MIPMAP_LINEAR	.\GL.h	938;"	d
GL_NEAREST_MIPMAP_NEAREST	.\GL.h	936;"	d
GL_NEVER	.\GL.h	72;"	d
GL_NICEST	.\GL.h	623;"	d
GL_NONE	.\GL.h	214;"	d
GL_NOOP	.\GL.h	704;"	d
GL_NOR	.\GL.h	707;"	d
GL_NORMALIZE	.\GL.h	430;"	d
GL_NORMAL_ARRAY	.\GL.h	1028;"	d
GL_NORMAL_ARRAY_COUNT_EXT	.\GL.h	1090;"	d
GL_NORMAL_ARRAY_EXT	.\GL.h	1079;"	d
GL_NORMAL_ARRAY_POINTER	.\GL.h	1048;"	d
GL_NORMAL_ARRAY_POINTER_EXT	.\GL.h	1105;"	d
GL_NORMAL_ARRAY_STRIDE	.\GL.h	1037;"	d
GL_NORMAL_ARRAY_STRIDE_EXT	.\GL.h	1089;"	d
GL_NORMAL_ARRAY_TYPE	.\GL.h	1036;"	d
GL_NORMAL_ARRAY_TYPE_EXT	.\GL.h	1088;"	d
GL_NOTEQUAL	.\GL.h	77;"	d
GL_NO_ERROR	.\GL.h	298;"	d
GL_OBJECT_LINEAR	.\GL.h	921;"	d
GL_OBJECT_PLANE	.\GL.h	926;"	d
GL_ONE	.\GL.h	118;"	d
GL_ONE_MINUS_DST_ALPHA	.\GL.h	124;"	d
GL_ONE_MINUS_DST_COLOR	.\GL.h	130;"	d
GL_ONE_MINUS_SRC_ALPHA	.\GL.h	122;"	d
GL_ONE_MINUS_SRC_COLOR	.\GL.h	120;"	d
GL_OR	.\GL.h	706;"	d
GL_ORDER	.\GL.h	343;"	d
GL_OR_INVERTED	.\GL.h	712;"	d
GL_OR_REVERSE	.\GL.h	710;"	d
GL_OUT_OF_MEMORY	.\GL.h	304;"	d
GL_PACK_ALIGNMENT	.\GL.h	504;"	d
GL_PACK_LSB_FIRST	.\GL.h	500;"	d
GL_PACK_ROW_LENGTH	.\GL.h	501;"	d
GL_PACK_SKIP_PIXELS	.\GL.h	503;"	d
GL_PACK_SKIP_ROWS	.\GL.h	502;"	d
GL_PACK_SWAP_BYTES	.\GL.h	499;"	d
GL_PASS_THROUGH_TOKEN	.\GL.h	314;"	d
GL_PERSPECTIVE_CORRECTION_HINT	.\GL.h	464;"	d
GL_PHONG_HINT_WIN	.\GL.h	1141;"	d
GL_PHONG_WIN	.\GL.h	1140;"	d
GL_PIXEL_MAP_A_TO_A	.\GL.h	482;"	d
GL_PIXEL_MAP_A_TO_A_SIZE	.\GL.h	492;"	d
GL_PIXEL_MAP_B_TO_B	.\GL.h	481;"	d
GL_PIXEL_MAP_B_TO_B_SIZE	.\GL.h	491;"	d
GL_PIXEL_MAP_G_TO_G	.\GL.h	480;"	d
GL_PIXEL_MAP_G_TO_G_SIZE	.\GL.h	490;"	d
GL_PIXEL_MAP_I_TO_A	.\GL.h	478;"	d
GL_PIXEL_MAP_I_TO_A_SIZE	.\GL.h	488;"	d
GL_PIXEL_MAP_I_TO_B	.\GL.h	477;"	d
GL_PIXEL_MAP_I_TO_B_SIZE	.\GL.h	487;"	d
GL_PIXEL_MAP_I_TO_G	.\GL.h	476;"	d
GL_PIXEL_MAP_I_TO_G_SIZE	.\GL.h	486;"	d
GL_PIXEL_MAP_I_TO_I	.\GL.h	473;"	d
GL_PIXEL_MAP_I_TO_I_SIZE	.\GL.h	483;"	d
GL_PIXEL_MAP_I_TO_R	.\GL.h	475;"	d
GL_PIXEL_MAP_I_TO_R_SIZE	.\GL.h	485;"	d
GL_PIXEL_MAP_R_TO_R	.\GL.h	479;"	d
GL_PIXEL_MAP_R_TO_R_SIZE	.\GL.h	489;"	d
GL_PIXEL_MAP_S_TO_S	.\GL.h	474;"	d
GL_PIXEL_MAP_S_TO_S_SIZE	.\GL.h	484;"	d
GL_PIXEL_MODE_BIT	.\GL.h	87;"	d
GL_POINT	.\GL.h	842;"	d
GL_POINTS	.\GL.h	105;"	d
GL_POINT_BIT	.\GL.h	83;"	d
GL_POINT_SIZE	.\GL.h	378;"	d
GL_POINT_SIZE_GRANULARITY	.\GL.h	380;"	d
GL_POINT_SIZE_RANGE	.\GL.h	379;"	d
GL_POINT_SMOOTH	.\GL.h	377;"	d
GL_POINT_SMOOTH_HINT	.\GL.h	465;"	d
GL_POINT_TOKEN	.\GL.h	315;"	d
GL_POLYGON	.\GL.h	114;"	d
GL_POLYGON_BIT	.\GL.h	85;"	d
GL_POLYGON_MODE	.\GL.h	392;"	d
GL_POLYGON_OFFSET_FACTOR	.\GL.h	971;"	d
GL_POLYGON_OFFSET_FILL	.\GL.h	975;"	d
GL_POLYGON_OFFSET_LINE	.\GL.h	974;"	d
GL_POLYGON_OFFSET_POINT	.\GL.h	973;"	d
GL_POLYGON_OFFSET_UNITS	.\GL.h	972;"	d
GL_POLYGON_SMOOTH	.\GL.h	393;"	d
GL_POLYGON_SMOOTH_HINT	.\GL.h	467;"	d
GL_POLYGON_STIPPLE	.\GL.h	394;"	d
GL_POLYGON_STIPPLE_BIT	.\GL.h	86;"	d
GL_POLYGON_TOKEN	.\GL.h	317;"	d
GL_POSITION	.\GL.h	658;"	d
GL_PROJECTION	.\GL.h	752;"	d
GL_PROJECTION_MATRIX	.\GL.h	436;"	d
GL_PROJECTION_STACK_DEPTH	.\GL.h	433;"	d
GL_PROXY_TEXTURE_1D	.\GL.h	1017;"	d
GL_PROXY_TEXTURE_2D	.\GL.h	1018;"	d
GL_Q	.\GL.h	898;"	d
GL_QUADRATIC_ATTENUATION	.\GL.h	664;"	d
GL_QUADS	.\GL.h	112;"	d
GL_QUAD_STRIP	.\GL.h	113;"	d
GL_R	.\GL.h	897;"	d
GL_R3_G3_B2	.\GL.h	997;"	d
GL_READ_BUFFER	.\GL.h	452;"	d
GL_RED	.\GL.h	780;"	d
GL_RED_BIAS	.\GL.h	510;"	d
GL_RED_BITS	.\GL.h	535;"	d
GL_RED_SCALE	.\GL.h	509;"	d
GL_RENDER	.\GL.h	861;"	d
GL_RENDERER	.\GL.h	890;"	d
GL_RENDER_MODE	.\GL.h	463;"	d
GL_REPEAT	.\GL.h	957;"	d
GL_REPLACE	.\GL.h	883;"	d
GL_RETURN	.\GL.h	67;"	d
GL_RGB	.\GL.h	784;"	d
GL_RGB10	.\GL.h	1001;"	d
GL_RGB10_A2	.\GL.h	1008;"	d
GL_RGB12	.\GL.h	1002;"	d
GL_RGB16	.\GL.h	1003;"	d
GL_RGB4	.\GL.h	998;"	d
GL_RGB5	.\GL.h	999;"	d
GL_RGB5_A1	.\GL.h	1006;"	d
GL_RGB8	.\GL.h	1000;"	d
GL_RGBA	.\GL.h	785;"	d
GL_RGBA12	.\GL.h	1009;"	d
GL_RGBA16	.\GL.h	1010;"	d
GL_RGBA2	.\GL.h	1004;"	d
GL_RGBA4	.\GL.h	1005;"	d
GL_RGBA8	.\GL.h	1007;"	d
GL_RGBA_MODE	.\GL.h	460;"	d
GL_RIGHT	.\GL.h	222;"	d
GL_S	.\GL.h	895;"	d
GL_SCISSOR_BIT	.\GL.h	101;"	d
GL_SCISSOR_BOX	.\GL.h	453;"	d
GL_SCISSOR_TEST	.\GL.h	454;"	d
GL_SELECT	.\GL.h	863;"	d
GL_SELECTION_BUFFER_POINTER	.\GL.h	574;"	d
GL_SELECTION_BUFFER_SIZE	.\GL.h	575;"	d
GL_SET	.\GL.h	714;"	d
GL_SHADE_MODEL	.\GL.h	403;"	d
GL_SHININESS	.\GL.h	743;"	d
GL_SHORT	.\GL.h	193;"	d
GL_SMOOTH	.\GL.h	867;"	d
GL_SPECULAR	.\GL.h	657;"	d
GL_SPHERE_MAP	.\GL.h	922;"	d
GL_SPOT_CUTOFF	.\GL.h	661;"	d
GL_SPOT_DIRECTION	.\GL.h	659;"	d
GL_SPOT_EXPONENT	.\GL.h	660;"	d
GL_SRC_ALPHA	.\GL.h	121;"	d
GL_SRC_ALPHA_SATURATE	.\GL.h	131;"	d
GL_SRC_COLOR	.\GL.h	119;"	d
GL_STACK_OVERFLOW	.\GL.h	302;"	d
GL_STACK_UNDERFLOW	.\GL.h	303;"	d
GL_STENCIL	.\GL.h	774;"	d
GL_STENCIL_BITS	.\GL.h	540;"	d
GL_STENCIL_BUFFER_BIT	.\GL.h	92;"	d
GL_STENCIL_CLEAR_VALUE	.\GL.h	421;"	d
GL_STENCIL_FAIL	.\GL.h	424;"	d
GL_STENCIL_FUNC	.\GL.h	422;"	d
GL_STENCIL_INDEX	.\GL.h	778;"	d
GL_STENCIL_PASS_DEPTH_FAIL	.\GL.h	425;"	d
GL_STENCIL_PASS_DEPTH_PASS	.\GL.h	426;"	d
GL_STENCIL_REF	.\GL.h	427;"	d
GL_STENCIL_TEST	.\GL.h	420;"	d
GL_STENCIL_VALUE_MASK	.\GL.h	423;"	d
GL_STENCIL_WRITEMASK	.\GL.h	428;"	d
GL_STEREO	.\GL.h	462;"	d
GL_SUBPIXEL_BITS	.\GL.h	533;"	d
GL_T	.\GL.h	896;"	d
GL_T2F_C3F_V3F	.\GL.h	1063;"	d
GL_T2F_C4F_N3F_V3F	.\GL.h	1065;"	d
GL_T2F_C4UB_V3F	.\GL.h	1062;"	d
GL_T2F_N3F_V3F	.\GL.h	1064;"	d
GL_T2F_V3F	.\GL.h	1060;"	d
GL_T4F_C4F_N3F_V4F	.\GL.h	1066;"	d
GL_T4F_V4F	.\GL.h	1061;"	d
GL_TEXTURE	.\GL.h	753;"	d
GL_TEXTURE_1D	.\GL.h	569;"	d
GL_TEXTURE_2D	.\GL.h	570;"	d
GL_TEXTURE_ALPHA_SIZE	.\GL.h	1014;"	d
GL_TEXTURE_BINDING_1D	.\GL.h	1023;"	d
GL_TEXTURE_BINDING_2D	.\GL.h	1024;"	d
GL_TEXTURE_BIT	.\GL.h	100;"	d
GL_TEXTURE_BLUE_SIZE	.\GL.h	1013;"	d
GL_TEXTURE_BORDER	.\GL.h	610;"	d
GL_TEXTURE_BORDER_COLOR	.\GL.h	609;"	d
GL_TEXTURE_COMPONENTS	.\GL.h	1148;"	d
GL_TEXTURE_COORD_ARRAY	.\GL.h	1031;"	d
GL_TEXTURE_COORD_ARRAY_COUNT_EXT	.\GL.h	1101;"	d
GL_TEXTURE_COORD_ARRAY_EXT	.\GL.h	1082;"	d
GL_TEXTURE_COORD_ARRAY_POINTER	.\GL.h	1051;"	d
GL_TEXTURE_COORD_ARRAY_POINTER_EXT	.\GL.h	1108;"	d
GL_TEXTURE_COORD_ARRAY_SIZE	.\GL.h	1043;"	d
GL_TEXTURE_COORD_ARRAY_SIZE_EXT	.\GL.h	1098;"	d
GL_TEXTURE_COORD_ARRAY_STRIDE	.\GL.h	1045;"	d
GL_TEXTURE_COORD_ARRAY_STRIDE_EXT	.\GL.h	1100;"	d
GL_TEXTURE_COORD_ARRAY_TYPE	.\GL.h	1044;"	d
GL_TEXTURE_COORD_ARRAY_TYPE_EXT	.\GL.h	1099;"	d
GL_TEXTURE_ENV	.\GL.h	917;"	d
GL_TEXTURE_ENV_COLOR	.\GL.h	914;"	d
GL_TEXTURE_ENV_MODE	.\GL.h	913;"	d
GL_TEXTURE_GEN_MODE	.\GL.h	925;"	d
GL_TEXTURE_GEN_Q	.\GL.h	472;"	d
GL_TEXTURE_GEN_R	.\GL.h	471;"	d
GL_TEXTURE_GEN_S	.\GL.h	469;"	d
GL_TEXTURE_GEN_T	.\GL.h	470;"	d
GL_TEXTURE_GREEN_SIZE	.\GL.h	1012;"	d
GL_TEXTURE_HEIGHT	.\GL.h	607;"	d
GL_TEXTURE_INTENSITY_SIZE	.\GL.h	1016;"	d
GL_TEXTURE_INTERNAL_FORMAT	.\GL.h	608;"	d
GL_TEXTURE_LUMINANCE_SIZE	.\GL.h	1015;"	d
GL_TEXTURE_MAG_FILTER	.\GL.h	942;"	d
GL_TEXTURE_MATRIX	.\GL.h	437;"	d
GL_TEXTURE_MIN_FILTER	.\GL.h	943;"	d
GL_TEXTURE_PRIORITY	.\GL.h	1021;"	d
GL_TEXTURE_RED_SIZE	.\GL.h	1011;"	d
GL_TEXTURE_RESIDENT	.\GL.h	1022;"	d
GL_TEXTURE_STACK_DEPTH	.\GL.h	434;"	d
GL_TEXTURE_WIDTH	.\GL.h	606;"	d
GL_TEXTURE_WRAP_S	.\GL.h	944;"	d
GL_TEXTURE_WRAP_T	.\GL.h	945;"	d
GL_TRANSFORM_BIT	.\GL.h	94;"	d
GL_TRIANGLES	.\GL.h	109;"	d
GL_TRIANGLE_FAN	.\GL.h	111;"	d
GL_TRIANGLE_STRIP	.\GL.h	110;"	d
GL_TRUE	.\GL.h	138;"	d
GL_UNPACK_ALIGNMENT	.\GL.h	498;"	d
GL_UNPACK_LSB_FIRST	.\GL.h	494;"	d
GL_UNPACK_ROW_LENGTH	.\GL.h	495;"	d
GL_UNPACK_SKIP_PIXELS	.\GL.h	497;"	d
GL_UNPACK_SKIP_ROWS	.\GL.h	496;"	d
GL_UNPACK_SWAP_BYTES	.\GL.h	493;"	d
GL_UNSIGNED_BYTE	.\GL.h	192;"	d
GL_UNSIGNED_INT	.\GL.h	196;"	d
GL_UNSIGNED_SHORT	.\GL.h	194;"	d
GL_V2F	.\GL.h	1053;"	d
GL_V3F	.\GL.h	1054;"	d
GL_VENDOR	.\GL.h	889;"	d
GL_VERSION	.\GL.h	891;"	d
GL_VERSION_1_1	.\GL.h	62;"	d
GL_VERTEX_ARRAY	.\GL.h	1027;"	d
GL_VERTEX_ARRAY_COUNT_EXT	.\GL.h	1087;"	d
GL_VERTEX_ARRAY_EXT	.\GL.h	1078;"	d
GL_VERTEX_ARRAY_POINTER	.\GL.h	1047;"	d
GL_VERTEX_ARRAY_POINTER_EXT	.\GL.h	1104;"	d
GL_VERTEX_ARRAY_SIZE	.\GL.h	1033;"	d
GL_VERTEX_ARRAY_SIZE_EXT	.\GL.h	1084;"	d
GL_VERTEX_ARRAY_STRIDE	.\GL.h	1035;"	d
GL_VERTEX_ARRAY_STRIDE_EXT	.\GL.h	1086;"	d
GL_VERTEX_ARRAY_TYPE	.\GL.h	1034;"	d
GL_VERTEX_ARRAY_TYPE_EXT	.\GL.h	1085;"	d
GL_VIEWPORT	.\GL.h	431;"	d
GL_VIEWPORT_BIT	.\GL.h	93;"	d
GL_WIN_draw_range_elements	.\GL.h	1073;"	d
GL_WIN_swap_hint	.\GL.h	1072;"	d
GL_XOR	.\GL.h	705;"	d
GL_ZERO	.\GL.h	117;"	d
GL_ZOOM_X	.\GL.h	511;"	d
GL_ZOOM_Y	.\GL.h	512;"	d
GLbitfield	.\GL.h	/^typedef unsigned int GLbitfield;$/;"	t
GLboolean	.\GL.h	/^typedef unsigned char GLboolean;$/;"	t
GLbyte	.\GL.h	/^typedef signed char GLbyte;$/;"	t
GLclampd	.\GL.h	/^typedef double GLclampd;$/;"	t
GLclampf	.\GL.h	/^typedef float GLclampf;$/;"	t
GLdouble	.\GL.h	/^typedef double GLdouble;$/;"	t
GLenum	.\GL.h	/^typedef unsigned int GLenum;$/;"	t
GLfloat	.\GL.h	/^typedef float GLfloat;$/;"	t
GLint	.\GL.h	/^typedef int GLint;$/;"	t
GLshort	.\GL.h	/^typedef short GLshort;$/;"	t
GLsizei	.\GL.h	/^typedef int GLsizei;$/;"	t
GLubyte	.\GL.h	/^typedef unsigned char GLubyte;$/;"	t
GLuint	.\GL.h	/^typedef unsigned int GLuint;$/;"	t
GLushort	.\GL.h	/^typedef unsigned short GLushort;$/;"	t
GLvoid	.\GL.h	/^typedef void GLvoid;$/;"	t
PFNGLADDSWAPHINTRECTWINPROC	.\GL.h	/^typedef void (APIENTRY * PFNGLADDSWAPHINTRECTWINPROC)  (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLARRAYELEMENTARRAYEXTPROC	.\GL.h	/^typedef void (APIENTRY * PFNGLARRAYELEMENTARRAYEXTPROC)(GLenum mode, GLsizei count, const GLvoid* pi);$/;"	t
PFNGLARRAYELEMENTEXTPROC	.\GL.h	/^typedef void (APIENTRY * PFNGLARRAYELEMENTEXTPROC) (GLint i);$/;"	t
PFNGLCOLORPOINTEREXTPROC	.\GL.h	/^typedef void (APIENTRY * PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);$/;"	t
PFNGLCOLORSUBTABLEEXTPROC	.\GL.h	/^typedef void (APIENTRY * PFNGLCOLORSUBTABLEEXTPROC)$/;"	t
PFNGLCOLORTABLEEXTPROC	.\GL.h	/^typedef void (APIENTRY * PFNGLCOLORTABLEEXTPROC)$/;"	t
PFNGLDRAWARRAYSEXTPROC	.\GL.h	/^typedef void (APIENTRY * PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count);$/;"	t
PFNGLDRAWRANGEELEMENTSWINPROC	.\GL.h	/^typedef void (APIENTRY * PFNGLDRAWRANGEELEMENTSWINPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);$/;"	t
PFNGLEDGEFLAGPOINTEREXTPROC	.\GL.h	/^typedef void (APIENTRY * PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean *pointer);$/;"	t
PFNGLGETCOLORTABLEEXTPROC	.\GL.h	/^typedef void (APIENTRY * PFNGLGETCOLORTABLEEXTPROC)$/;"	t
PFNGLGETCOLORTABLEPARAMETERFVEXTPROC	.\GL.h	/^typedef void (APIENTRY * PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)$/;"	t
PFNGLGETCOLORTABLEPARAMETERIVEXTPROC	.\GL.h	/^typedef void (APIENTRY * PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)$/;"	t
PFNGLGETPOINTERVEXTPROC	.\GL.h	/^typedef void (APIENTRY * PFNGLGETPOINTERVEXTPROC) (GLenum pname, GLvoid* *params);$/;"	t
PFNGLINDEXPOINTEREXTPROC	.\GL.h	/^typedef void (APIENTRY * PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);$/;"	t
PFNGLNORMALPOINTEREXTPROC	.\GL.h	/^typedef void (APIENTRY * PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);$/;"	t
PFNGLTEXCOORDPOINTEREXTPROC	.\GL.h	/^typedef void (APIENTRY * PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);$/;"	t
PFNGLVERTEXPOINTEREXTPROC	.\GL.h	/^typedef void (APIENTRY * PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);$/;"	t
WINGDIAPI	.\glut.h	39;"	d
WINGDIAPI	.\glut.h	40;"	d
WINGDIAPI	.\glut.h	45;"	d
WINGDIAPI	.\glut.h	703;"	d
_CRTIMP	.\glut.h	109;"	d
_CRTIMP	.\glut.h	113;"	d
_CRTIMP	.\glut.h	115;"	d
_CRTIMP	.\glut.h	713;"	d
_WCHAR_T_DEFINED	.\glut.h	51;"	d
__GLU_H__	.\GLU.h	20;"	d
__GL_H__	.\GL.h	20;"	d
__cdecl	.\glut.h	103;"	d
__cdecl	.\glut.h	708;"	d
__gl_h_	.\GL.h	19;"	d
__glu_h__	.\GLU.h	19;"	d
__glutCreateMenuWithExit	.\glut.h	/^GLUTAPI int APIENTRY __glutCreateMenuWithExit(void (GLUTCALLBACK *func)(int), void (__cdecl *exitfunc)(int));$/;"	p	signature:(void (GLUTCALLBACK *func)(int), void (__cdecl *exitfunc)(int))
__glutCreateWindowWithExit	.\glut.h	/^GLUTAPI int APIENTRY __glutCreateWindowWithExit(const char *title, void (__cdecl *exitfunc)(int));$/;"	p	signature:(const char *title, void (__cdecl *exitfunc)(int))
__glutInitWithExit	.\glut.h	/^GLUTAPI void APIENTRY __glutInitWithExit(int *argcp, char **argv, void (__cdecl *exitfunc)(int));$/;"	p	signature:(int *argcp, char **argv, void (__cdecl *exitfunc)(int))
__glut_h__	.\glut.h	2;"	d
exit	.\glut.h	/^extern _CRTIMP void __cdecl exit(int);$/;"	p	signature:(int)
exit	.\glut.h	/^extern void exit(int);$/;"	p	signature:(int)
glAccum	.\GL.h	/^WINGDIAPI void APIENTRY glAccum (GLenum op, GLfloat value);$/;"	p	signature:(GLenum op, GLfloat value)
glAlphaFunc	.\GL.h	/^WINGDIAPI void APIENTRY glAlphaFunc (GLenum func, GLclampf ref);$/;"	p	signature:(GLenum func, GLclampf ref)
glAreTexturesResident	.\GL.h	/^WINGDIAPI GLboolean APIENTRY glAreTexturesResident (GLsizei n, const GLuint *textures, GLboolean *residences);$/;"	p	signature:(GLsizei n, const GLuint *textures, GLboolean *residences)
glArrayElement	.\GL.h	/^WINGDIAPI void APIENTRY glArrayElement (GLint i);$/;"	p	signature:(GLint i)
glBegin	.\GL.h	/^WINGDIAPI void APIENTRY glBegin (GLenum mode);$/;"	p	signature:(GLenum mode)
glBindTexture	.\GL.h	/^WINGDIAPI void APIENTRY glBindTexture (GLenum target, GLuint texture);$/;"	p	signature:(GLenum target, GLuint texture)
glBitmap	.\GL.h	/^WINGDIAPI void APIENTRY glBitmap (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);$/;"	p	signature:(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
glBlendFunc	.\GL.h	/^WINGDIAPI void APIENTRY glBlendFunc (GLenum sfactor, GLenum dfactor);$/;"	p	signature:(GLenum sfactor, GLenum dfactor)
glCallList	.\GL.h	/^WINGDIAPI void APIENTRY glCallList (GLuint list);$/;"	p	signature:(GLuint list)
glCallLists	.\GL.h	/^WINGDIAPI void APIENTRY glCallLists (GLsizei n, GLenum type, const GLvoid *lists);$/;"	p	signature:(GLsizei n, GLenum type, const GLvoid *lists)
glClear	.\GL.h	/^WINGDIAPI void APIENTRY glClear (GLbitfield mask);$/;"	p	signature:(GLbitfield mask)
glClearAccum	.\GL.h	/^WINGDIAPI void APIENTRY glClearAccum (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	p	signature:(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
glClearColor	.\GL.h	/^WINGDIAPI void APIENTRY glClearColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);$/;"	p	signature:(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
glClearDepth	.\GL.h	/^WINGDIAPI void APIENTRY glClearDepth (GLclampd depth);$/;"	p	signature:(GLclampd depth)
glClearIndex	.\GL.h	/^WINGDIAPI void APIENTRY glClearIndex (GLfloat c);$/;"	p	signature:(GLfloat c)
glClearStencil	.\GL.h	/^WINGDIAPI void APIENTRY glClearStencil (GLint s);$/;"	p	signature:(GLint s)
glClipPlane	.\GL.h	/^WINGDIAPI void APIENTRY glClipPlane (GLenum plane, const GLdouble *equation);$/;"	p	signature:(GLenum plane, const GLdouble *equation)
glColor3b	.\GL.h	/^WINGDIAPI void APIENTRY glColor3b (GLbyte red, GLbyte green, GLbyte blue);$/;"	p	signature:(GLbyte red, GLbyte green, GLbyte blue)
glColor3bv	.\GL.h	/^WINGDIAPI void APIENTRY glColor3bv (const GLbyte *v);$/;"	p	signature:(const GLbyte *v)
glColor3d	.\GL.h	/^WINGDIAPI void APIENTRY glColor3d (GLdouble red, GLdouble green, GLdouble blue);$/;"	p	signature:(GLdouble red, GLdouble green, GLdouble blue)
glColor3dv	.\GL.h	/^WINGDIAPI void APIENTRY glColor3dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glColor3f	.\GL.h	/^WINGDIAPI void APIENTRY glColor3f (GLfloat red, GLfloat green, GLfloat blue);$/;"	p	signature:(GLfloat red, GLfloat green, GLfloat blue)
glColor3fv	.\GL.h	/^WINGDIAPI void APIENTRY glColor3fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glColor3i	.\GL.h	/^WINGDIAPI void APIENTRY glColor3i (GLint red, GLint green, GLint blue);$/;"	p	signature:(GLint red, GLint green, GLint blue)
glColor3iv	.\GL.h	/^WINGDIAPI void APIENTRY glColor3iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glColor3s	.\GL.h	/^WINGDIAPI void APIENTRY glColor3s (GLshort red, GLshort green, GLshort blue);$/;"	p	signature:(GLshort red, GLshort green, GLshort blue)
glColor3sv	.\GL.h	/^WINGDIAPI void APIENTRY glColor3sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glColor3ub	.\GL.h	/^WINGDIAPI void APIENTRY glColor3ub (GLubyte red, GLubyte green, GLubyte blue);$/;"	p	signature:(GLubyte red, GLubyte green, GLubyte blue)
glColor3ubv	.\GL.h	/^WINGDIAPI void APIENTRY glColor3ubv (const GLubyte *v);$/;"	p	signature:(const GLubyte *v)
glColor3ui	.\GL.h	/^WINGDIAPI void APIENTRY glColor3ui (GLuint red, GLuint green, GLuint blue);$/;"	p	signature:(GLuint red, GLuint green, GLuint blue)
glColor3uiv	.\GL.h	/^WINGDIAPI void APIENTRY glColor3uiv (const GLuint *v);$/;"	p	signature:(const GLuint *v)
glColor3us	.\GL.h	/^WINGDIAPI void APIENTRY glColor3us (GLushort red, GLushort green, GLushort blue);$/;"	p	signature:(GLushort red, GLushort green, GLushort blue)
glColor3usv	.\GL.h	/^WINGDIAPI void APIENTRY glColor3usv (const GLushort *v);$/;"	p	signature:(const GLushort *v)
glColor4b	.\GL.h	/^WINGDIAPI void APIENTRY glColor4b (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);$/;"	p	signature:(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
glColor4bv	.\GL.h	/^WINGDIAPI void APIENTRY glColor4bv (const GLbyte *v);$/;"	p	signature:(const GLbyte *v)
glColor4d	.\GL.h	/^WINGDIAPI void APIENTRY glColor4d (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);$/;"	p	signature:(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
glColor4dv	.\GL.h	/^WINGDIAPI void APIENTRY glColor4dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glColor4f	.\GL.h	/^WINGDIAPI void APIENTRY glColor4f (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	p	signature:(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
glColor4fv	.\GL.h	/^WINGDIAPI void APIENTRY glColor4fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glColor4i	.\GL.h	/^WINGDIAPI void APIENTRY glColor4i (GLint red, GLint green, GLint blue, GLint alpha);$/;"	p	signature:(GLint red, GLint green, GLint blue, GLint alpha)
glColor4iv	.\GL.h	/^WINGDIAPI void APIENTRY glColor4iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glColor4s	.\GL.h	/^WINGDIAPI void APIENTRY glColor4s (GLshort red, GLshort green, GLshort blue, GLshort alpha);$/;"	p	signature:(GLshort red, GLshort green, GLshort blue, GLshort alpha)
glColor4sv	.\GL.h	/^WINGDIAPI void APIENTRY glColor4sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glColor4ub	.\GL.h	/^WINGDIAPI void APIENTRY glColor4ub (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);$/;"	p	signature:(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
glColor4ubv	.\GL.h	/^WINGDIAPI void APIENTRY glColor4ubv (const GLubyte *v);$/;"	p	signature:(const GLubyte *v)
glColor4ui	.\GL.h	/^WINGDIAPI void APIENTRY glColor4ui (GLuint red, GLuint green, GLuint blue, GLuint alpha);$/;"	p	signature:(GLuint red, GLuint green, GLuint blue, GLuint alpha)
glColor4uiv	.\GL.h	/^WINGDIAPI void APIENTRY glColor4uiv (const GLuint *v);$/;"	p	signature:(const GLuint *v)
glColor4us	.\GL.h	/^WINGDIAPI void APIENTRY glColor4us (GLushort red, GLushort green, GLushort blue, GLushort alpha);$/;"	p	signature:(GLushort red, GLushort green, GLushort blue, GLushort alpha)
glColor4usv	.\GL.h	/^WINGDIAPI void APIENTRY glColor4usv (const GLushort *v);$/;"	p	signature:(const GLushort *v)
glColorMask	.\GL.h	/^WINGDIAPI void APIENTRY glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);$/;"	p	signature:(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
glColorMaterial	.\GL.h	/^WINGDIAPI void APIENTRY glColorMaterial (GLenum face, GLenum mode);$/;"	p	signature:(GLenum face, GLenum mode)
glColorPointer	.\GL.h	/^WINGDIAPI void APIENTRY glColorPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);$/;"	p	signature:(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
glCopyPixels	.\GL.h	/^WINGDIAPI void APIENTRY glCopyPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);$/;"	p	signature:(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
glCopyTexImage1D	.\GL.h	/^WINGDIAPI void APIENTRY glCopyTexImage1D (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);$/;"	p	signature:(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border)
glCopyTexImage2D	.\GL.h	/^WINGDIAPI void APIENTRY glCopyTexImage2D (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);$/;"	p	signature:(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
glCopyTexSubImage1D	.\GL.h	/^WINGDIAPI void APIENTRY glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
glCopyTexSubImage2D	.\GL.h	/^WINGDIAPI void APIENTRY glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
glCullFace	.\GL.h	/^WINGDIAPI void APIENTRY glCullFace (GLenum mode);$/;"	p	signature:(GLenum mode)
glDeleteLists	.\GL.h	/^WINGDIAPI void APIENTRY glDeleteLists (GLuint list, GLsizei range);$/;"	p	signature:(GLuint list, GLsizei range)
glDeleteTextures	.\GL.h	/^WINGDIAPI void APIENTRY glDeleteTextures (GLsizei n, const GLuint *textures);$/;"	p	signature:(GLsizei n, const GLuint *textures)
glDepthFunc	.\GL.h	/^WINGDIAPI void APIENTRY glDepthFunc (GLenum func);$/;"	p	signature:(GLenum func)
glDepthMask	.\GL.h	/^WINGDIAPI void APIENTRY glDepthMask (GLboolean flag);$/;"	p	signature:(GLboolean flag)
glDepthRange	.\GL.h	/^WINGDIAPI void APIENTRY glDepthRange (GLclampd zNear, GLclampd zFar);$/;"	p	signature:(GLclampd zNear, GLclampd zFar)
glDisable	.\GL.h	/^WINGDIAPI void APIENTRY glDisable (GLenum cap);$/;"	p	signature:(GLenum cap)
glDisableClientState	.\GL.h	/^WINGDIAPI void APIENTRY glDisableClientState (GLenum array);$/;"	p	signature:(GLenum array)
glDrawArrays	.\GL.h	/^WINGDIAPI void APIENTRY glDrawArrays (GLenum mode, GLint first, GLsizei count);$/;"	p	signature:(GLenum mode, GLint first, GLsizei count)
glDrawBuffer	.\GL.h	/^WINGDIAPI void APIENTRY glDrawBuffer (GLenum mode);$/;"	p	signature:(GLenum mode)
glDrawElements	.\GL.h	/^WINGDIAPI void APIENTRY glDrawElements (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);$/;"	p	signature:(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
glDrawPixels	.\GL.h	/^WINGDIAPI void APIENTRY glDrawPixels (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);$/;"	p	signature:(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
glEdgeFlag	.\GL.h	/^WINGDIAPI void APIENTRY glEdgeFlag (GLboolean flag);$/;"	p	signature:(GLboolean flag)
glEdgeFlagPointer	.\GL.h	/^WINGDIAPI void APIENTRY glEdgeFlagPointer (GLsizei stride, const GLvoid *pointer);$/;"	p	signature:(GLsizei stride, const GLvoid *pointer)
glEdgeFlagv	.\GL.h	/^WINGDIAPI void APIENTRY glEdgeFlagv (const GLboolean *flag);$/;"	p	signature:(const GLboolean *flag)
glEnable	.\GL.h	/^WINGDIAPI void APIENTRY glEnable (GLenum cap);$/;"	p	signature:(GLenum cap)
glEnableClientState	.\GL.h	/^WINGDIAPI void APIENTRY glEnableClientState (GLenum array);$/;"	p	signature:(GLenum array)
glEnd	.\GL.h	/^WINGDIAPI void APIENTRY glEnd (void);$/;"	p	signature:(void)
glEndList	.\GL.h	/^WINGDIAPI void APIENTRY glEndList (void);$/;"	p	signature:(void)
glEvalCoord1d	.\GL.h	/^WINGDIAPI void APIENTRY glEvalCoord1d (GLdouble u);$/;"	p	signature:(GLdouble u)
glEvalCoord1dv	.\GL.h	/^WINGDIAPI void APIENTRY glEvalCoord1dv (const GLdouble *u);$/;"	p	signature:(const GLdouble *u)
glEvalCoord1f	.\GL.h	/^WINGDIAPI void APIENTRY glEvalCoord1f (GLfloat u);$/;"	p	signature:(GLfloat u)
glEvalCoord1fv	.\GL.h	/^WINGDIAPI void APIENTRY glEvalCoord1fv (const GLfloat *u);$/;"	p	signature:(const GLfloat *u)
glEvalCoord2d	.\GL.h	/^WINGDIAPI void APIENTRY glEvalCoord2d (GLdouble u, GLdouble v);$/;"	p	signature:(GLdouble u, GLdouble v)
glEvalCoord2dv	.\GL.h	/^WINGDIAPI void APIENTRY glEvalCoord2dv (const GLdouble *u);$/;"	p	signature:(const GLdouble *u)
glEvalCoord2f	.\GL.h	/^WINGDIAPI void APIENTRY glEvalCoord2f (GLfloat u, GLfloat v);$/;"	p	signature:(GLfloat u, GLfloat v)
glEvalCoord2fv	.\GL.h	/^WINGDIAPI void APIENTRY glEvalCoord2fv (const GLfloat *u);$/;"	p	signature:(const GLfloat *u)
glEvalMesh1	.\GL.h	/^WINGDIAPI void APIENTRY glEvalMesh1 (GLenum mode, GLint i1, GLint i2);$/;"	p	signature:(GLenum mode, GLint i1, GLint i2)
glEvalMesh2	.\GL.h	/^WINGDIAPI void APIENTRY glEvalMesh2 (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);$/;"	p	signature:(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
glEvalPoint1	.\GL.h	/^WINGDIAPI void APIENTRY glEvalPoint1 (GLint i);$/;"	p	signature:(GLint i)
glEvalPoint2	.\GL.h	/^WINGDIAPI void APIENTRY glEvalPoint2 (GLint i, GLint j);$/;"	p	signature:(GLint i, GLint j)
glFeedbackBuffer	.\GL.h	/^WINGDIAPI void APIENTRY glFeedbackBuffer (GLsizei size, GLenum type, GLfloat *buffer);$/;"	p	signature:(GLsizei size, GLenum type, GLfloat *buffer)
glFinish	.\GL.h	/^WINGDIAPI void APIENTRY glFinish (void);$/;"	p	signature:(void)
glFlush	.\GL.h	/^WINGDIAPI void APIENTRY glFlush (void);$/;"	p	signature:(void)
glFogf	.\GL.h	/^WINGDIAPI void APIENTRY glFogf (GLenum pname, GLfloat param);$/;"	p	signature:(GLenum pname, GLfloat param)
glFogfv	.\GL.h	/^WINGDIAPI void APIENTRY glFogfv (GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum pname, const GLfloat *params)
glFogi	.\GL.h	/^WINGDIAPI void APIENTRY glFogi (GLenum pname, GLint param);$/;"	p	signature:(GLenum pname, GLint param)
glFogiv	.\GL.h	/^WINGDIAPI void APIENTRY glFogiv (GLenum pname, const GLint *params);$/;"	p	signature:(GLenum pname, const GLint *params)
glFrontFace	.\GL.h	/^WINGDIAPI void APIENTRY glFrontFace (GLenum mode);$/;"	p	signature:(GLenum mode)
glFrustum	.\GL.h	/^WINGDIAPI void APIENTRY glFrustum (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);$/;"	p	signature:(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
glGenLists	.\GL.h	/^WINGDIAPI GLuint APIENTRY glGenLists (GLsizei range);$/;"	p	signature:(GLsizei range)
glGenTextures	.\GL.h	/^WINGDIAPI void APIENTRY glGenTextures (GLsizei n, GLuint *textures);$/;"	p	signature:(GLsizei n, GLuint *textures)
glGetBooleanv	.\GL.h	/^WINGDIAPI void APIENTRY glGetBooleanv (GLenum pname, GLboolean *params);$/;"	p	signature:(GLenum pname, GLboolean *params)
glGetClipPlane	.\GL.h	/^WINGDIAPI void APIENTRY glGetClipPlane (GLenum plane, GLdouble *equation);$/;"	p	signature:(GLenum plane, GLdouble *equation)
glGetDoublev	.\GL.h	/^WINGDIAPI void APIENTRY glGetDoublev (GLenum pname, GLdouble *params);$/;"	p	signature:(GLenum pname, GLdouble *params)
glGetError	.\GL.h	/^WINGDIAPI GLenum APIENTRY glGetError (void);$/;"	p	signature:(void)
glGetFloatv	.\GL.h	/^WINGDIAPI void APIENTRY glGetFloatv (GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum pname, GLfloat *params)
glGetIntegerv	.\GL.h	/^WINGDIAPI void APIENTRY glGetIntegerv (GLenum pname, GLint *params);$/;"	p	signature:(GLenum pname, GLint *params)
glGetLightfv	.\GL.h	/^WINGDIAPI void APIENTRY glGetLightfv (GLenum light, GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum light, GLenum pname, GLfloat *params)
glGetLightiv	.\GL.h	/^WINGDIAPI void APIENTRY glGetLightiv (GLenum light, GLenum pname, GLint *params);$/;"	p	signature:(GLenum light, GLenum pname, GLint *params)
glGetMapdv	.\GL.h	/^WINGDIAPI void APIENTRY glGetMapdv (GLenum target, GLenum query, GLdouble *v);$/;"	p	signature:(GLenum target, GLenum query, GLdouble *v)
glGetMapfv	.\GL.h	/^WINGDIAPI void APIENTRY glGetMapfv (GLenum target, GLenum query, GLfloat *v);$/;"	p	signature:(GLenum target, GLenum query, GLfloat *v)
glGetMapiv	.\GL.h	/^WINGDIAPI void APIENTRY glGetMapiv (GLenum target, GLenum query, GLint *v);$/;"	p	signature:(GLenum target, GLenum query, GLint *v)
glGetMaterialfv	.\GL.h	/^WINGDIAPI void APIENTRY glGetMaterialfv (GLenum face, GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum face, GLenum pname, GLfloat *params)
glGetMaterialiv	.\GL.h	/^WINGDIAPI void APIENTRY glGetMaterialiv (GLenum face, GLenum pname, GLint *params);$/;"	p	signature:(GLenum face, GLenum pname, GLint *params)
glGetPixelMapfv	.\GL.h	/^WINGDIAPI void APIENTRY glGetPixelMapfv (GLenum map, GLfloat *values);$/;"	p	signature:(GLenum map, GLfloat *values)
glGetPixelMapuiv	.\GL.h	/^WINGDIAPI void APIENTRY glGetPixelMapuiv (GLenum map, GLuint *values);$/;"	p	signature:(GLenum map, GLuint *values)
glGetPixelMapusv	.\GL.h	/^WINGDIAPI void APIENTRY glGetPixelMapusv (GLenum map, GLushort *values);$/;"	p	signature:(GLenum map, GLushort *values)
glGetPointerv	.\GL.h	/^WINGDIAPI void APIENTRY glGetPointerv (GLenum pname, GLvoid* *params);$/;"	p	signature:(GLenum pname, GLvoid* *params)
glGetPolygonStipple	.\GL.h	/^WINGDIAPI void APIENTRY glGetPolygonStipple (GLubyte *mask);$/;"	p	signature:(GLubyte *mask)
glGetString	.\GL.h	/^WINGDIAPI const GLubyte * APIENTRY glGetString (GLenum name);$/;"	p	signature:(GLenum name)
glGetTexEnvfv	.\GL.h	/^WINGDIAPI void APIENTRY glGetTexEnvfv (GLenum target, GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum target, GLenum pname, GLfloat *params)
glGetTexEnviv	.\GL.h	/^WINGDIAPI void APIENTRY glGetTexEnviv (GLenum target, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint *params)
glGetTexGendv	.\GL.h	/^WINGDIAPI void APIENTRY glGetTexGendv (GLenum coord, GLenum pname, GLdouble *params);$/;"	p	signature:(GLenum coord, GLenum pname, GLdouble *params)
glGetTexGenfv	.\GL.h	/^WINGDIAPI void APIENTRY glGetTexGenfv (GLenum coord, GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum coord, GLenum pname, GLfloat *params)
glGetTexGeniv	.\GL.h	/^WINGDIAPI void APIENTRY glGetTexGeniv (GLenum coord, GLenum pname, GLint *params);$/;"	p	signature:(GLenum coord, GLenum pname, GLint *params)
glGetTexImage	.\GL.h	/^WINGDIAPI void APIENTRY glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);$/;"	p	signature:(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
glGetTexLevelParameterfv	.\GL.h	/^WINGDIAPI void APIENTRY glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum target, GLint level, GLenum pname, GLfloat *params)
glGetTexLevelParameteriv	.\GL.h	/^WINGDIAPI void APIENTRY glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLint level, GLenum pname, GLint *params)
glGetTexParameterfv	.\GL.h	/^WINGDIAPI void APIENTRY glGetTexParameterfv (GLenum target, GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum target, GLenum pname, GLfloat *params)
glGetTexParameteriv	.\GL.h	/^WINGDIAPI void APIENTRY glGetTexParameteriv (GLenum target, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint *params)
glHint	.\GL.h	/^WINGDIAPI void APIENTRY glHint (GLenum target, GLenum mode);$/;"	p	signature:(GLenum target, GLenum mode)
glIndexMask	.\GL.h	/^WINGDIAPI void APIENTRY glIndexMask (GLuint mask);$/;"	p	signature:(GLuint mask)
glIndexPointer	.\GL.h	/^WINGDIAPI void APIENTRY glIndexPointer (GLenum type, GLsizei stride, const GLvoid *pointer);$/;"	p	signature:(GLenum type, GLsizei stride, const GLvoid *pointer)
glIndexd	.\GL.h	/^WINGDIAPI void APIENTRY glIndexd (GLdouble c);$/;"	p	signature:(GLdouble c)
glIndexdv	.\GL.h	/^WINGDIAPI void APIENTRY glIndexdv (const GLdouble *c);$/;"	p	signature:(const GLdouble *c)
glIndexf	.\GL.h	/^WINGDIAPI void APIENTRY glIndexf (GLfloat c);$/;"	p	signature:(GLfloat c)
glIndexfv	.\GL.h	/^WINGDIAPI void APIENTRY glIndexfv (const GLfloat *c);$/;"	p	signature:(const GLfloat *c)
glIndexi	.\GL.h	/^WINGDIAPI void APIENTRY glIndexi (GLint c);$/;"	p	signature:(GLint c)
glIndexiv	.\GL.h	/^WINGDIAPI void APIENTRY glIndexiv (const GLint *c);$/;"	p	signature:(const GLint *c)
glIndexs	.\GL.h	/^WINGDIAPI void APIENTRY glIndexs (GLshort c);$/;"	p	signature:(GLshort c)
glIndexsv	.\GL.h	/^WINGDIAPI void APIENTRY glIndexsv (const GLshort *c);$/;"	p	signature:(const GLshort *c)
glIndexub	.\GL.h	/^WINGDIAPI void APIENTRY glIndexub (GLubyte c);$/;"	p	signature:(GLubyte c)
glIndexubv	.\GL.h	/^WINGDIAPI void APIENTRY glIndexubv (const GLubyte *c);$/;"	p	signature:(const GLubyte *c)
glInitNames	.\GL.h	/^WINGDIAPI void APIENTRY glInitNames (void);$/;"	p	signature:(void)
glInterleavedArrays	.\GL.h	/^WINGDIAPI void APIENTRY glInterleavedArrays (GLenum format, GLsizei stride, const GLvoid *pointer);$/;"	p	signature:(GLenum format, GLsizei stride, const GLvoid *pointer)
glIsEnabled	.\GL.h	/^WINGDIAPI GLboolean APIENTRY glIsEnabled (GLenum cap);$/;"	p	signature:(GLenum cap)
glIsList	.\GL.h	/^WINGDIAPI GLboolean APIENTRY glIsList (GLuint list);$/;"	p	signature:(GLuint list)
glIsTexture	.\GL.h	/^WINGDIAPI GLboolean APIENTRY glIsTexture (GLuint texture);$/;"	p	signature:(GLuint texture)
glLightModelf	.\GL.h	/^WINGDIAPI void APIENTRY glLightModelf (GLenum pname, GLfloat param);$/;"	p	signature:(GLenum pname, GLfloat param)
glLightModelfv	.\GL.h	/^WINGDIAPI void APIENTRY glLightModelfv (GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum pname, const GLfloat *params)
glLightModeli	.\GL.h	/^WINGDIAPI void APIENTRY glLightModeli (GLenum pname, GLint param);$/;"	p	signature:(GLenum pname, GLint param)
glLightModeliv	.\GL.h	/^WINGDIAPI void APIENTRY glLightModeliv (GLenum pname, const GLint *params);$/;"	p	signature:(GLenum pname, const GLint *params)
glLightf	.\GL.h	/^WINGDIAPI void APIENTRY glLightf (GLenum light, GLenum pname, GLfloat param);$/;"	p	signature:(GLenum light, GLenum pname, GLfloat param)
glLightfv	.\GL.h	/^WINGDIAPI void APIENTRY glLightfv (GLenum light, GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum light, GLenum pname, const GLfloat *params)
glLighti	.\GL.h	/^WINGDIAPI void APIENTRY glLighti (GLenum light, GLenum pname, GLint param);$/;"	p	signature:(GLenum light, GLenum pname, GLint param)
glLightiv	.\GL.h	/^WINGDIAPI void APIENTRY glLightiv (GLenum light, GLenum pname, const GLint *params);$/;"	p	signature:(GLenum light, GLenum pname, const GLint *params)
glLineStipple	.\GL.h	/^WINGDIAPI void APIENTRY glLineStipple (GLint factor, GLushort pattern);$/;"	p	signature:(GLint factor, GLushort pattern)
glLineWidth	.\GL.h	/^WINGDIAPI void APIENTRY glLineWidth (GLfloat width);$/;"	p	signature:(GLfloat width)
glListBase	.\GL.h	/^WINGDIAPI void APIENTRY glListBase (GLuint base);$/;"	p	signature:(GLuint base)
glLoadIdentity	.\GL.h	/^WINGDIAPI void APIENTRY glLoadIdentity (void);$/;"	p	signature:(void)
glLoadMatrixd	.\GL.h	/^WINGDIAPI void APIENTRY glLoadMatrixd (const GLdouble *m);$/;"	p	signature:(const GLdouble *m)
glLoadMatrixf	.\GL.h	/^WINGDIAPI void APIENTRY glLoadMatrixf (const GLfloat *m);$/;"	p	signature:(const GLfloat *m)
glLoadName	.\GL.h	/^WINGDIAPI void APIENTRY glLoadName (GLuint name);$/;"	p	signature:(GLuint name)
glLogicOp	.\GL.h	/^WINGDIAPI void APIENTRY glLogicOp (GLenum opcode);$/;"	p	signature:(GLenum opcode)
glMap1d	.\GL.h	/^WINGDIAPI void APIENTRY glMap1d (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);$/;"	p	signature:(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
glMap1f	.\GL.h	/^WINGDIAPI void APIENTRY glMap1f (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);$/;"	p	signature:(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
glMap2d	.\GL.h	/^WINGDIAPI void APIENTRY glMap2d (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);$/;"	p	signature:(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
glMap2f	.\GL.h	/^WINGDIAPI void APIENTRY glMap2f (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);$/;"	p	signature:(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
glMapGrid1d	.\GL.h	/^WINGDIAPI void APIENTRY glMapGrid1d (GLint un, GLdouble u1, GLdouble u2);$/;"	p	signature:(GLint un, GLdouble u1, GLdouble u2)
glMapGrid1f	.\GL.h	/^WINGDIAPI void APIENTRY glMapGrid1f (GLint un, GLfloat u1, GLfloat u2);$/;"	p	signature:(GLint un, GLfloat u1, GLfloat u2)
glMapGrid2d	.\GL.h	/^WINGDIAPI void APIENTRY glMapGrid2d (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);$/;"	p	signature:(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
glMapGrid2f	.\GL.h	/^WINGDIAPI void APIENTRY glMapGrid2f (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);$/;"	p	signature:(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
glMaterialf	.\GL.h	/^WINGDIAPI void APIENTRY glMaterialf (GLenum face, GLenum pname, GLfloat param);$/;"	p	signature:(GLenum face, GLenum pname, GLfloat param)
glMaterialfv	.\GL.h	/^WINGDIAPI void APIENTRY glMaterialfv (GLenum face, GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum face, GLenum pname, const GLfloat *params)
glMateriali	.\GL.h	/^WINGDIAPI void APIENTRY glMateriali (GLenum face, GLenum pname, GLint param);$/;"	p	signature:(GLenum face, GLenum pname, GLint param)
glMaterialiv	.\GL.h	/^WINGDIAPI void APIENTRY glMaterialiv (GLenum face, GLenum pname, const GLint *params);$/;"	p	signature:(GLenum face, GLenum pname, const GLint *params)
glMatrixMode	.\GL.h	/^WINGDIAPI void APIENTRY glMatrixMode (GLenum mode);$/;"	p	signature:(GLenum mode)
glMultMatrixd	.\GL.h	/^WINGDIAPI void APIENTRY glMultMatrixd (const GLdouble *m);$/;"	p	signature:(const GLdouble *m)
glMultMatrixf	.\GL.h	/^WINGDIAPI void APIENTRY glMultMatrixf (const GLfloat *m);$/;"	p	signature:(const GLfloat *m)
glNewList	.\GL.h	/^WINGDIAPI void APIENTRY glNewList (GLuint list, GLenum mode);$/;"	p	signature:(GLuint list, GLenum mode)
glNormal3b	.\GL.h	/^WINGDIAPI void APIENTRY glNormal3b (GLbyte nx, GLbyte ny, GLbyte nz);$/;"	p	signature:(GLbyte nx, GLbyte ny, GLbyte nz)
glNormal3bv	.\GL.h	/^WINGDIAPI void APIENTRY glNormal3bv (const GLbyte *v);$/;"	p	signature:(const GLbyte *v)
glNormal3d	.\GL.h	/^WINGDIAPI void APIENTRY glNormal3d (GLdouble nx, GLdouble ny, GLdouble nz);$/;"	p	signature:(GLdouble nx, GLdouble ny, GLdouble nz)
glNormal3dv	.\GL.h	/^WINGDIAPI void APIENTRY glNormal3dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glNormal3f	.\GL.h	/^WINGDIAPI void APIENTRY glNormal3f (GLfloat nx, GLfloat ny, GLfloat nz);$/;"	p	signature:(GLfloat nx, GLfloat ny, GLfloat nz)
glNormal3fv	.\GL.h	/^WINGDIAPI void APIENTRY glNormal3fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glNormal3i	.\GL.h	/^WINGDIAPI void APIENTRY glNormal3i (GLint nx, GLint ny, GLint nz);$/;"	p	signature:(GLint nx, GLint ny, GLint nz)
glNormal3iv	.\GL.h	/^WINGDIAPI void APIENTRY glNormal3iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glNormal3s	.\GL.h	/^WINGDIAPI void APIENTRY glNormal3s (GLshort nx, GLshort ny, GLshort nz);$/;"	p	signature:(GLshort nx, GLshort ny, GLshort nz)
glNormal3sv	.\GL.h	/^WINGDIAPI void APIENTRY glNormal3sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glNormalPointer	.\GL.h	/^WINGDIAPI void APIENTRY glNormalPointer (GLenum type, GLsizei stride, const GLvoid *pointer);$/;"	p	signature:(GLenum type, GLsizei stride, const GLvoid *pointer)
glOrtho	.\GL.h	/^WINGDIAPI void APIENTRY glOrtho (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);$/;"	p	signature:(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
glPassThrough	.\GL.h	/^WINGDIAPI void APIENTRY glPassThrough (GLfloat token);$/;"	p	signature:(GLfloat token)
glPixelMapfv	.\GL.h	/^WINGDIAPI void APIENTRY glPixelMapfv (GLenum map, GLsizei mapsize, const GLfloat *values);$/;"	p	signature:(GLenum map, GLsizei mapsize, const GLfloat *values)
glPixelMapuiv	.\GL.h	/^WINGDIAPI void APIENTRY glPixelMapuiv (GLenum map, GLsizei mapsize, const GLuint *values);$/;"	p	signature:(GLenum map, GLsizei mapsize, const GLuint *values)
glPixelMapusv	.\GL.h	/^WINGDIAPI void APIENTRY glPixelMapusv (GLenum map, GLsizei mapsize, const GLushort *values);$/;"	p	signature:(GLenum map, GLsizei mapsize, const GLushort *values)
glPixelStoref	.\GL.h	/^WINGDIAPI void APIENTRY glPixelStoref (GLenum pname, GLfloat param);$/;"	p	signature:(GLenum pname, GLfloat param)
glPixelStorei	.\GL.h	/^WINGDIAPI void APIENTRY glPixelStorei (GLenum pname, GLint param);$/;"	p	signature:(GLenum pname, GLint param)
glPixelTransferf	.\GL.h	/^WINGDIAPI void APIENTRY glPixelTransferf (GLenum pname, GLfloat param);$/;"	p	signature:(GLenum pname, GLfloat param)
glPixelTransferi	.\GL.h	/^WINGDIAPI void APIENTRY glPixelTransferi (GLenum pname, GLint param);$/;"	p	signature:(GLenum pname, GLint param)
glPixelZoom	.\GL.h	/^WINGDIAPI void APIENTRY glPixelZoom (GLfloat xfactor, GLfloat yfactor);$/;"	p	signature:(GLfloat xfactor, GLfloat yfactor)
glPointSize	.\GL.h	/^WINGDIAPI void APIENTRY glPointSize (GLfloat size);$/;"	p	signature:(GLfloat size)
glPolygonMode	.\GL.h	/^WINGDIAPI void APIENTRY glPolygonMode (GLenum face, GLenum mode);$/;"	p	signature:(GLenum face, GLenum mode)
glPolygonOffset	.\GL.h	/^WINGDIAPI void APIENTRY glPolygonOffset (GLfloat factor, GLfloat units);$/;"	p	signature:(GLfloat factor, GLfloat units)
glPolygonStipple	.\GL.h	/^WINGDIAPI void APIENTRY glPolygonStipple (const GLubyte *mask);$/;"	p	signature:(const GLubyte *mask)
glPopAttrib	.\GL.h	/^WINGDIAPI void APIENTRY glPopAttrib (void);$/;"	p	signature:(void)
glPopClientAttrib	.\GL.h	/^WINGDIAPI void APIENTRY glPopClientAttrib (void);$/;"	p	signature:(void)
glPopMatrix	.\GL.h	/^WINGDIAPI void APIENTRY glPopMatrix (void);$/;"	p	signature:(void)
glPopName	.\GL.h	/^WINGDIAPI void APIENTRY glPopName (void);$/;"	p	signature:(void)
glPrioritizeTextures	.\GL.h	/^WINGDIAPI void APIENTRY glPrioritizeTextures (GLsizei n, const GLuint *textures, const GLclampf *priorities);$/;"	p	signature:(GLsizei n, const GLuint *textures, const GLclampf *priorities)
glPushAttrib	.\GL.h	/^WINGDIAPI void APIENTRY glPushAttrib (GLbitfield mask);$/;"	p	signature:(GLbitfield mask)
glPushClientAttrib	.\GL.h	/^WINGDIAPI void APIENTRY glPushClientAttrib (GLbitfield mask);$/;"	p	signature:(GLbitfield mask)
glPushMatrix	.\GL.h	/^WINGDIAPI void APIENTRY glPushMatrix (void);$/;"	p	signature:(void)
glPushName	.\GL.h	/^WINGDIAPI void APIENTRY glPushName (GLuint name);$/;"	p	signature:(GLuint name)
glRasterPos2d	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos2d (GLdouble x, GLdouble y);$/;"	p	signature:(GLdouble x, GLdouble y)
glRasterPos2dv	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos2dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glRasterPos2f	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos2f (GLfloat x, GLfloat y);$/;"	p	signature:(GLfloat x, GLfloat y)
glRasterPos2fv	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos2fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glRasterPos2i	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos2i (GLint x, GLint y);$/;"	p	signature:(GLint x, GLint y)
glRasterPos2iv	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos2iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glRasterPos2s	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos2s (GLshort x, GLshort y);$/;"	p	signature:(GLshort x, GLshort y)
glRasterPos2sv	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos2sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glRasterPos3d	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos3d (GLdouble x, GLdouble y, GLdouble z);$/;"	p	signature:(GLdouble x, GLdouble y, GLdouble z)
glRasterPos3dv	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos3dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glRasterPos3f	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos3f (GLfloat x, GLfloat y, GLfloat z);$/;"	p	signature:(GLfloat x, GLfloat y, GLfloat z)
glRasterPos3fv	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos3fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glRasterPos3i	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos3i (GLint x, GLint y, GLint z);$/;"	p	signature:(GLint x, GLint y, GLint z)
glRasterPos3iv	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos3iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glRasterPos3s	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos3s (GLshort x, GLshort y, GLshort z);$/;"	p	signature:(GLshort x, GLshort y, GLshort z)
glRasterPos3sv	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos3sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glRasterPos4d	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	p	signature:(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
glRasterPos4dv	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos4dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glRasterPos4f	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w);$/;"	p	signature:(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
glRasterPos4fv	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos4fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glRasterPos4i	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos4i (GLint x, GLint y, GLint z, GLint w);$/;"	p	signature:(GLint x, GLint y, GLint z, GLint w)
glRasterPos4iv	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos4iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glRasterPos4s	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos4s (GLshort x, GLshort y, GLshort z, GLshort w);$/;"	p	signature:(GLshort x, GLshort y, GLshort z, GLshort w)
glRasterPos4sv	.\GL.h	/^WINGDIAPI void APIENTRY glRasterPos4sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glReadBuffer	.\GL.h	/^WINGDIAPI void APIENTRY glReadBuffer (GLenum mode);$/;"	p	signature:(GLenum mode)
glReadPixels	.\GL.h	/^WINGDIAPI void APIENTRY glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);$/;"	p	signature:(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
glRectd	.\GL.h	/^WINGDIAPI void APIENTRY glRectd (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);$/;"	p	signature:(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
glRectdv	.\GL.h	/^WINGDIAPI void APIENTRY glRectdv (const GLdouble *v1, const GLdouble *v2);$/;"	p	signature:(const GLdouble *v1, const GLdouble *v2)
glRectf	.\GL.h	/^WINGDIAPI void APIENTRY glRectf (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);$/;"	p	signature:(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
glRectfv	.\GL.h	/^WINGDIAPI void APIENTRY glRectfv (const GLfloat *v1, const GLfloat *v2);$/;"	p	signature:(const GLfloat *v1, const GLfloat *v2)
glRecti	.\GL.h	/^WINGDIAPI void APIENTRY glRecti (GLint x1, GLint y1, GLint x2, GLint y2);$/;"	p	signature:(GLint x1, GLint y1, GLint x2, GLint y2)
glRectiv	.\GL.h	/^WINGDIAPI void APIENTRY glRectiv (const GLint *v1, const GLint *v2);$/;"	p	signature:(const GLint *v1, const GLint *v2)
glRects	.\GL.h	/^WINGDIAPI void APIENTRY glRects (GLshort x1, GLshort y1, GLshort x2, GLshort y2);$/;"	p	signature:(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
glRectsv	.\GL.h	/^WINGDIAPI void APIENTRY glRectsv (const GLshort *v1, const GLshort *v2);$/;"	p	signature:(const GLshort *v1, const GLshort *v2)
glRenderMode	.\GL.h	/^WINGDIAPI GLint APIENTRY glRenderMode (GLenum mode);$/;"	p	signature:(GLenum mode)
glRotated	.\GL.h	/^WINGDIAPI void APIENTRY glRotated (GLdouble angle, GLdouble x, GLdouble y, GLdouble z);$/;"	p	signature:(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
glRotatef	.\GL.h	/^WINGDIAPI void APIENTRY glRotatef (GLfloat angle, GLfloat x, GLfloat y, GLfloat z);$/;"	p	signature:(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
glScaled	.\GL.h	/^WINGDIAPI void APIENTRY glScaled (GLdouble x, GLdouble y, GLdouble z);$/;"	p	signature:(GLdouble x, GLdouble y, GLdouble z)
glScalef	.\GL.h	/^WINGDIAPI void APIENTRY glScalef (GLfloat x, GLfloat y, GLfloat z);$/;"	p	signature:(GLfloat x, GLfloat y, GLfloat z)
glScissor	.\GL.h	/^WINGDIAPI void APIENTRY glScissor (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	p	signature:(GLint x, GLint y, GLsizei width, GLsizei height)
glSelectBuffer	.\GL.h	/^WINGDIAPI void APIENTRY glSelectBuffer (GLsizei size, GLuint *buffer);$/;"	p	signature:(GLsizei size, GLuint *buffer)
glShadeModel	.\GL.h	/^WINGDIAPI void APIENTRY glShadeModel (GLenum mode);$/;"	p	signature:(GLenum mode)
glStencilFunc	.\GL.h	/^WINGDIAPI void APIENTRY glStencilFunc (GLenum func, GLint ref, GLuint mask);$/;"	p	signature:(GLenum func, GLint ref, GLuint mask)
glStencilMask	.\GL.h	/^WINGDIAPI void APIENTRY glStencilMask (GLuint mask);$/;"	p	signature:(GLuint mask)
glStencilOp	.\GL.h	/^WINGDIAPI void APIENTRY glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);$/;"	p	signature:(GLenum fail, GLenum zfail, GLenum zpass)
glTexCoord1d	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord1d (GLdouble s);$/;"	p	signature:(GLdouble s)
glTexCoord1dv	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord1dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glTexCoord1f	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord1f (GLfloat s);$/;"	p	signature:(GLfloat s)
glTexCoord1fv	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord1fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glTexCoord1i	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord1i (GLint s);$/;"	p	signature:(GLint s)
glTexCoord1iv	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord1iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glTexCoord1s	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord1s (GLshort s);$/;"	p	signature:(GLshort s)
glTexCoord1sv	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord1sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glTexCoord2d	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord2d (GLdouble s, GLdouble t);$/;"	p	signature:(GLdouble s, GLdouble t)
glTexCoord2dv	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord2dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glTexCoord2f	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord2f (GLfloat s, GLfloat t);$/;"	p	signature:(GLfloat s, GLfloat t)
glTexCoord2fv	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord2fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glTexCoord2i	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord2i (GLint s, GLint t);$/;"	p	signature:(GLint s, GLint t)
glTexCoord2iv	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord2iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glTexCoord2s	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord2s (GLshort s, GLshort t);$/;"	p	signature:(GLshort s, GLshort t)
glTexCoord2sv	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord2sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glTexCoord3d	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord3d (GLdouble s, GLdouble t, GLdouble r);$/;"	p	signature:(GLdouble s, GLdouble t, GLdouble r)
glTexCoord3dv	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord3dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glTexCoord3f	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord3f (GLfloat s, GLfloat t, GLfloat r);$/;"	p	signature:(GLfloat s, GLfloat t, GLfloat r)
glTexCoord3fv	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord3fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glTexCoord3i	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord3i (GLint s, GLint t, GLint r);$/;"	p	signature:(GLint s, GLint t, GLint r)
glTexCoord3iv	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord3iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glTexCoord3s	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord3s (GLshort s, GLshort t, GLshort r);$/;"	p	signature:(GLshort s, GLshort t, GLshort r)
glTexCoord3sv	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord3sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glTexCoord4d	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord4d (GLdouble s, GLdouble t, GLdouble r, GLdouble q);$/;"	p	signature:(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
glTexCoord4dv	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord4dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glTexCoord4f	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord4f (GLfloat s, GLfloat t, GLfloat r, GLfloat q);$/;"	p	signature:(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
glTexCoord4fv	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord4fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glTexCoord4i	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord4i (GLint s, GLint t, GLint r, GLint q);$/;"	p	signature:(GLint s, GLint t, GLint r, GLint q)
glTexCoord4iv	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord4iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glTexCoord4s	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord4s (GLshort s, GLshort t, GLshort r, GLshort q);$/;"	p	signature:(GLshort s, GLshort t, GLshort r, GLshort q)
glTexCoord4sv	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoord4sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glTexCoordPointer	.\GL.h	/^WINGDIAPI void APIENTRY glTexCoordPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);$/;"	p	signature:(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
glTexEnvf	.\GL.h	/^WINGDIAPI void APIENTRY glTexEnvf (GLenum target, GLenum pname, GLfloat param);$/;"	p	signature:(GLenum target, GLenum pname, GLfloat param)
glTexEnvfv	.\GL.h	/^WINGDIAPI void APIENTRY glTexEnvfv (GLenum target, GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum target, GLenum pname, const GLfloat *params)
glTexEnvi	.\GL.h	/^WINGDIAPI void APIENTRY glTexEnvi (GLenum target, GLenum pname, GLint param);$/;"	p	signature:(GLenum target, GLenum pname, GLint param)
glTexEnviv	.\GL.h	/^WINGDIAPI void APIENTRY glTexEnviv (GLenum target, GLenum pname, const GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, const GLint *params)
glTexGend	.\GL.h	/^WINGDIAPI void APIENTRY glTexGend (GLenum coord, GLenum pname, GLdouble param);$/;"	p	signature:(GLenum coord, GLenum pname, GLdouble param)
glTexGendv	.\GL.h	/^WINGDIAPI void APIENTRY glTexGendv (GLenum coord, GLenum pname, const GLdouble *params);$/;"	p	signature:(GLenum coord, GLenum pname, const GLdouble *params)
glTexGenf	.\GL.h	/^WINGDIAPI void APIENTRY glTexGenf (GLenum coord, GLenum pname, GLfloat param);$/;"	p	signature:(GLenum coord, GLenum pname, GLfloat param)
glTexGenfv	.\GL.h	/^WINGDIAPI void APIENTRY glTexGenfv (GLenum coord, GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum coord, GLenum pname, const GLfloat *params)
glTexGeni	.\GL.h	/^WINGDIAPI void APIENTRY glTexGeni (GLenum coord, GLenum pname, GLint param);$/;"	p	signature:(GLenum coord, GLenum pname, GLint param)
glTexGeniv	.\GL.h	/^WINGDIAPI void APIENTRY glTexGeniv (GLenum coord, GLenum pname, const GLint *params);$/;"	p	signature:(GLenum coord, GLenum pname, const GLint *params)
glTexImage1D	.\GL.h	/^WINGDIAPI void APIENTRY glTexImage1D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
glTexImage2D	.\GL.h	/^WINGDIAPI void APIENTRY glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
glTexParameterf	.\GL.h	/^WINGDIAPI void APIENTRY glTexParameterf (GLenum target, GLenum pname, GLfloat param);$/;"	p	signature:(GLenum target, GLenum pname, GLfloat param)
glTexParameterfv	.\GL.h	/^WINGDIAPI void APIENTRY glTexParameterfv (GLenum target, GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum target, GLenum pname, const GLfloat *params)
glTexParameteri	.\GL.h	/^WINGDIAPI void APIENTRY glTexParameteri (GLenum target, GLenum pname, GLint param);$/;"	p	signature:(GLenum target, GLenum pname, GLint param)
glTexParameteriv	.\GL.h	/^WINGDIAPI void APIENTRY glTexParameteriv (GLenum target, GLenum pname, const GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, const GLint *params)
glTexSubImage1D	.\GL.h	/^WINGDIAPI void APIENTRY glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
glTexSubImage2D	.\GL.h	/^WINGDIAPI void APIENTRY glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
glTranslated	.\GL.h	/^WINGDIAPI void APIENTRY glTranslated (GLdouble x, GLdouble y, GLdouble z);$/;"	p	signature:(GLdouble x, GLdouble y, GLdouble z)
glTranslatef	.\GL.h	/^WINGDIAPI void APIENTRY glTranslatef (GLfloat x, GLfloat y, GLfloat z);$/;"	p	signature:(GLfloat x, GLfloat y, GLfloat z)
glVertex2d	.\GL.h	/^WINGDIAPI void APIENTRY glVertex2d (GLdouble x, GLdouble y);$/;"	p	signature:(GLdouble x, GLdouble y)
glVertex2dv	.\GL.h	/^WINGDIAPI void APIENTRY glVertex2dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glVertex2f	.\GL.h	/^WINGDIAPI void APIENTRY glVertex2f (GLfloat x, GLfloat y);$/;"	p	signature:(GLfloat x, GLfloat y)
glVertex2fv	.\GL.h	/^WINGDIAPI void APIENTRY glVertex2fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glVertex2i	.\GL.h	/^WINGDIAPI void APIENTRY glVertex2i (GLint x, GLint y);$/;"	p	signature:(GLint x, GLint y)
glVertex2iv	.\GL.h	/^WINGDIAPI void APIENTRY glVertex2iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glVertex2s	.\GL.h	/^WINGDIAPI void APIENTRY glVertex2s (GLshort x, GLshort y);$/;"	p	signature:(GLshort x, GLshort y)
glVertex2sv	.\GL.h	/^WINGDIAPI void APIENTRY glVertex2sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glVertex3d	.\GL.h	/^WINGDIAPI void APIENTRY glVertex3d (GLdouble x, GLdouble y, GLdouble z);$/;"	p	signature:(GLdouble x, GLdouble y, GLdouble z)
glVertex3dv	.\GL.h	/^WINGDIAPI void APIENTRY glVertex3dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glVertex3f	.\GL.h	/^WINGDIAPI void APIENTRY glVertex3f (GLfloat x, GLfloat y, GLfloat z);$/;"	p	signature:(GLfloat x, GLfloat y, GLfloat z)
glVertex3fv	.\GL.h	/^WINGDIAPI void APIENTRY glVertex3fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glVertex3i	.\GL.h	/^WINGDIAPI void APIENTRY glVertex3i (GLint x, GLint y, GLint z);$/;"	p	signature:(GLint x, GLint y, GLint z)
glVertex3iv	.\GL.h	/^WINGDIAPI void APIENTRY glVertex3iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glVertex3s	.\GL.h	/^WINGDIAPI void APIENTRY glVertex3s (GLshort x, GLshort y, GLshort z);$/;"	p	signature:(GLshort x, GLshort y, GLshort z)
glVertex3sv	.\GL.h	/^WINGDIAPI void APIENTRY glVertex3sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glVertex4d	.\GL.h	/^WINGDIAPI void APIENTRY glVertex4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	p	signature:(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
glVertex4dv	.\GL.h	/^WINGDIAPI void APIENTRY glVertex4dv (const GLdouble *v);$/;"	p	signature:(const GLdouble *v)
glVertex4f	.\GL.h	/^WINGDIAPI void APIENTRY glVertex4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w);$/;"	p	signature:(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
glVertex4fv	.\GL.h	/^WINGDIAPI void APIENTRY glVertex4fv (const GLfloat *v);$/;"	p	signature:(const GLfloat *v)
glVertex4i	.\GL.h	/^WINGDIAPI void APIENTRY glVertex4i (GLint x, GLint y, GLint z, GLint w);$/;"	p	signature:(GLint x, GLint y, GLint z, GLint w)
glVertex4iv	.\GL.h	/^WINGDIAPI void APIENTRY glVertex4iv (const GLint *v);$/;"	p	signature:(const GLint *v)
glVertex4s	.\GL.h	/^WINGDIAPI void APIENTRY glVertex4s (GLshort x, GLshort y, GLshort z, GLshort w);$/;"	p	signature:(GLshort x, GLshort y, GLshort z, GLshort w)
glVertex4sv	.\GL.h	/^WINGDIAPI void APIENTRY glVertex4sv (const GLshort *v);$/;"	p	signature:(const GLshort *v)
glVertexPointer	.\GL.h	/^WINGDIAPI void APIENTRY glVertexPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);$/;"	p	signature:(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
glViewport	.\GL.h	/^WINGDIAPI void APIENTRY glViewport (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	p	signature:(GLint x, GLint y, GLsizei width, GLsizei height)
gluBeginCurve	.\GLU.h	/^void APIENTRY gluBeginCurve ($/;"	p	signature:( GLUnurbs *nobj)
gluBeginPolygon	.\GLU.h	/^void APIENTRY   gluBeginPolygon( GLUtesselator *tess );$/;"	p	signature:( GLUtesselator *tess )
gluBeginSurface	.\GLU.h	/^void APIENTRY gluBeginSurface ($/;"	p	signature:( GLUnurbs *nobj)
gluBeginTrim	.\GLU.h	/^void APIENTRY gluBeginTrim ($/;"	p	signature:( GLUnurbs *nobj)
gluBuild1DMipmaps	.\GLU.h	/^int APIENTRY gluBuild1DMipmaps ($/;"	p	signature:( GLenum target, GLint components, GLint width, GLenum format, GLenum type, const void *data)
gluBuild2DMipmaps	.\GLU.h	/^int APIENTRY gluBuild2DMipmaps ($/;"	p	signature:( GLenum target, GLint components, GLint width, GLint height, GLenum format, GLenum type, const void *data)
gluCylinder	.\GLU.h	/^void APIENTRY gluCylinder ($/;"	p	signature:( GLUquadric *qobj, GLdouble baseRadius, GLdouble topRadius, GLdouble height, GLint slices, GLint stacks)
gluDeleteNurbsRenderer	.\GLU.h	/^void APIENTRY gluDeleteNurbsRenderer ($/;"	p	signature:( GLUnurbs *nobj)
gluDeleteQuadric	.\GLU.h	/^void APIENTRY gluDeleteQuadric ($/;"	p	signature:( GLUquadric *state)
gluDeleteTess	.\GLU.h	/^void APIENTRY  gluDeleteTess(       $/;"	p	signature:( GLUtesselator *tess )
gluDisk	.\GLU.h	/^void APIENTRY gluDisk ($/;"	p	signature:( GLUquadric *qobj, GLdouble innerRadius, GLdouble outerRadius, GLint slices, GLint loops)
gluEndCurve	.\GLU.h	/^void APIENTRY gluEndCurve ($/;"	p	signature:( GLUnurbs *nobj)
gluEndPolygon	.\GLU.h	/^void APIENTRY   gluEndPolygon(   GLUtesselator *tess );$/;"	p	signature:( GLUtesselator *tess )
gluEndSurface	.\GLU.h	/^void APIENTRY gluEndSurface ($/;"	p	signature:( GLUnurbs *nobj)
gluEndTrim	.\GLU.h	/^void APIENTRY gluEndTrim ($/;"	p	signature:( GLUnurbs *nobj)
gluErrorString	.\GLU.h	/^const GLubyte* APIENTRY gluErrorString ($/;"	p	signature:( GLenum errCode)
gluErrorStringWIN	.\GLU.h	55;"	d
gluErrorStringWIN	.\GLU.h	57;"	d
gluErrorUnicodeStringEXT	.\GLU.h	/^const wchar_t* APIENTRY gluErrorUnicodeStringEXT ($/;"	p	signature:( GLenum errCode)
gluGetNurbsProperty	.\GLU.h	/^gluGetNurbsProperty ($/;"	p	signature:( GLUnurbs *nobj, GLenum property, GLfloat *value )
gluGetString	.\GLU.h	/^const GLubyte* APIENTRY gluGetString ($/;"	p	signature:( GLenum name)
gluGetTessProperty	.\GLU.h	/^void APIENTRY  gluGetTessProperty(  $/;"	p	signature:( GLUtesselator *tess, GLenum which, GLdouble *value )
gluLoadSamplingMatrices	.\GLU.h	/^gluLoadSamplingMatrices ($/;"	p	signature:( GLUnurbs *nobj, const GLfloat modelMatrix[16], const GLfloat projMatrix[16], const GLint viewport[4] )
gluLookAt	.\GLU.h	/^void APIENTRY gluLookAt ($/;"	p	signature:( GLdouble eyex, GLdouble eyey, GLdouble eyez, GLdouble centerx, GLdouble centery, GLdouble centerz, GLdouble upx, GLdouble upy, GLdouble upz)
gluNewNurbsRenderer	.\GLU.h	/^GLUnurbs* APIENTRY gluNewNurbsRenderer (void);$/;"	p	signature:(void)
gluNewQuadric	.\GLU.h	/^GLUquadric* APIENTRY gluNewQuadric (void);$/;"	p	signature:(void)
gluNewTess	.\GLU.h	/^GLUtesselator* APIENTRY  gluNewTess(          $/;"	p	signature:( void )
gluNextContour	.\GLU.h	/^void APIENTRY   gluNextContour(  GLUtesselator *tess, $/;"	p	signature:( GLUtesselator *tess, GLenum type )
gluNurbsCallback	.\GLU.h	/^gluNurbsCallback ($/;"	p	signature:( GLUnurbs *nobj, GLenum which, void (CALLBACK* fn)() )
gluNurbsCurve	.\GLU.h	/^void APIENTRY gluNurbsCurve ($/;"	p	signature:( GLUnurbs *nobj, GLint nknots, GLfloat *knot, GLint stride, GLfloat *ctlarray, GLint order, GLenum type)
gluNurbsProperty	.\GLU.h	/^gluNurbsProperty ($/;"	p	signature:( GLUnurbs *nobj, GLenum property, GLfloat value )
gluNurbsSurface	.\GLU.h	/^gluNurbsSurface(     $/;"	p	signature:( GLUnurbs *nobj, GLint sknot_count, float *sknot, GLint tknot_count, GLfloat *tknot, GLint s_stride, GLint t_stride, GLfloat *ctlarray, GLint sorder, GLint torder, GLenum type)
gluOrtho2D	.\GLU.h	/^void APIENTRY gluOrtho2D ($/;"	p	signature:( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top)
gluPartialDisk	.\GLU.h	/^void APIENTRY gluPartialDisk ($/;"	p	signature:( GLUquadric *qobj, GLdouble innerRadius, GLdouble outerRadius, GLint slices, GLint loops, GLdouble startAngle, GLdouble sweepAngle)
gluPerspective	.\GLU.h	/^void APIENTRY gluPerspective ($/;"	p	signature:( GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar)
gluPickMatrix	.\GLU.h	/^void APIENTRY gluPickMatrix ($/;"	p	signature:( GLdouble x, GLdouble y, GLdouble width, GLdouble height, GLint viewport[4])
gluProject	.\GLU.h	/^int APIENTRY gluProject ($/;"	p	signature:( GLdouble objx, GLdouble objy, GLdouble objz, const GLdouble modelMatrix[16], const GLdouble projMatrix[16], const GLint viewport[4], GLdouble *winx, GLdouble *winy, GLdouble *winz)
gluPwlCurve	.\GLU.h	/^void APIENTRY gluPwlCurve ($/;"	p	signature:( GLUnurbs *nobj, GLint count, GLfloat *array, GLint stride, GLenum type)
gluQuadricCallback	.\GLU.h	/^void APIENTRY gluQuadricCallback ($/;"	p	signature:( GLUquadric *qobj, GLenum which, void (CALLBACK* fn)())
gluQuadricDrawStyle	.\GLU.h	/^void APIENTRY gluQuadricDrawStyle ($/;"	p	signature:( GLUquadric *quadObject, GLenum drawStyle)
gluQuadricNormals	.\GLU.h	/^void APIENTRY gluQuadricNormals ($/;"	p	signature:( GLUquadric *quadObject, GLenum normals)
gluQuadricOrientation	.\GLU.h	/^void APIENTRY gluQuadricOrientation ($/;"	p	signature:( GLUquadric *quadObject, GLenum orientation)
gluQuadricTexture	.\GLU.h	/^void APIENTRY gluQuadricTexture ($/;"	p	signature:( GLUquadric *quadObject, GLboolean textureCoords)
gluScaleImage	.\GLU.h	/^int APIENTRY gluScaleImage ($/;"	p	signature:( GLenum format, GLint widthin, GLint heightin, GLenum typein, const void *datain, GLint widthout, GLint heightout, GLenum typeout, void *dataout)
gluSphere	.\GLU.h	/^void APIENTRY gluSphere ($/;"	p	signature:( GLUquadric *qobj, GLdouble radius, GLint slices, GLint stacks)
gluTessBeginContour	.\GLU.h	/^void APIENTRY  gluTessBeginContour( $/;"	p	signature:( GLUtesselator *tess )
gluTessBeginPolygon	.\GLU.h	/^void APIENTRY  gluTessBeginPolygon( $/;"	p	signature:( GLUtesselator *tess, void *polygon_data )
gluTessCallback	.\GLU.h	/^void APIENTRY  gluTessCallback(     $/;"	p	signature:( GLUtesselator *tess, GLenum which, void (CALLBACK *fn)())
gluTessEndContour	.\GLU.h	/^void APIENTRY  gluTessEndContour(   $/;"	p	signature:( GLUtesselator *tess )
gluTessEndPolygon	.\GLU.h	/^void APIENTRY  gluTessEndPolygon(   $/;"	p	signature:( GLUtesselator *tess )
gluTessNormal	.\GLU.h	/^void APIENTRY  gluTessNormal(       $/;"	p	signature:( GLUtesselator *tess, GLdouble x, GLdouble y, GLdouble z )
gluTessProperty	.\GLU.h	/^void APIENTRY  gluTessProperty(     $/;"	p	signature:( GLUtesselator *tess, GLenum which, GLdouble value )
gluTessVertex	.\GLU.h	/^void APIENTRY  gluTessVertex(       $/;"	p	signature:( GLUtesselator *tess, GLdouble coords[3], void *data )
gluUnProject	.\GLU.h	/^int APIENTRY gluUnProject ($/;"	p	signature:( GLdouble winx, GLdouble winy, GLdouble winz, const GLdouble modelMatrix[16], const GLdouble projMatrix[16], const GLint viewport[4], GLdouble *objx, GLdouble *objy, GLdouble *objz)
glutAddMenuEntry	.\glut.h	/^GLUTAPI void APIENTRY glutAddMenuEntry(const char *label, int value);$/;"	p	signature:(const char *label, int value)
glutAddSubMenu	.\glut.h	/^GLUTAPI void APIENTRY glutAddSubMenu(const char *label, int submenu);$/;"	p	signature:(const char *label, int submenu)
glutAttachMenu	.\glut.h	/^GLUTAPI void APIENTRY glutAttachMenu(int button);$/;"	p	signature:(int button)
glutBitmap8By13	.\glut.h	/^GLUTAPI void *glutBitmap8By13;$/;"	v
glutBitmap9By15	.\glut.h	/^GLUTAPI void *glutBitmap9By15;$/;"	v
glutBitmapCharacter	.\glut.h	/^GLUTAPI void APIENTRY glutBitmapCharacter(void *font, int character);$/;"	p	signature:(void *font, int character)
glutBitmapHelvetica10	.\glut.h	/^GLUTAPI void *glutBitmapHelvetica10;$/;"	v
glutBitmapHelvetica12	.\glut.h	/^GLUTAPI void *glutBitmapHelvetica12;$/;"	v
glutBitmapHelvetica18	.\glut.h	/^GLUTAPI void *glutBitmapHelvetica18;$/;"	v
glutBitmapLength	.\glut.h	/^GLUTAPI int APIENTRY glutBitmapLength(void *font, const unsigned char *string);$/;"	p	signature:(void *font, const unsigned char *string)
glutBitmapTimesRoman10	.\glut.h	/^GLUTAPI void *glutBitmapTimesRoman10;$/;"	v
glutBitmapTimesRoman24	.\glut.h	/^GLUTAPI void *glutBitmapTimesRoman24;$/;"	v
glutBitmapWidth	.\glut.h	/^GLUTAPI int APIENTRY glutBitmapWidth(void *font, int character);$/;"	p	signature:(void *font, int character)
glutButtonBoxFunc	.\glut.h	/^GLUTAPI void APIENTRY glutButtonBoxFunc(void (GLUTCALLBACK *func)(int button, int state));$/;"	p	signature:(void (GLUTCALLBACK *func)(int button, int state))
glutChangeToMenuEntry	.\glut.h	/^GLUTAPI void APIENTRY glutChangeToMenuEntry(int item, const char *label, int value);$/;"	p	signature:(int item, const char *label, int value)
glutChangeToSubMenu	.\glut.h	/^GLUTAPI void APIENTRY glutChangeToSubMenu(int item, const char *label, int submenu);$/;"	p	signature:(int item, const char *label, int submenu)
glutCopyColormap	.\glut.h	/^GLUTAPI void APIENTRY glutCopyColormap(int win);$/;"	p	signature:(int win)
glutCreateMenu	.\glut.h	/^GLUTAPI int APIENTRY glutCreateMenu(void (GLUTCALLBACK *func)(int));$/;"	p	signature:(void (GLUTCALLBACK *func)(int))
glutCreateMenu	.\glut.h	550;"	d
glutCreateMenu_ATEXIT_HACK	.\glut.h	/^static int APIENTRY glutCreateMenu_ATEXIT_HACK(void (GLUTCALLBACK *func)(int)) { return __glutCreateMenuWithExit(func, exit); }$/;"	f	signature:(void (GLUTCALLBACK *func)(int))
glutCreateSubWindow	.\glut.h	/^GLUTAPI int APIENTRY glutCreateSubWindow(int win, int x, int y, int width, int height);$/;"	p	signature:(int win, int x, int y, int width, int height)
glutCreateWindow	.\glut.h	/^GLUTAPI int APIENTRY glutCreateWindow(const char *title);$/;"	p	signature:(const char *title)
glutCreateWindow	.\glut.h	504;"	d
glutCreateWindow_ATEXIT_HACK	.\glut.h	/^static int APIENTRY glutCreateWindow_ATEXIT_HACK(const char *title) { return __glutCreateWindowWithExit(title, exit); }$/;"	f	signature:(const char *title)
glutDestroyMenu	.\glut.h	/^GLUTAPI void APIENTRY glutDestroyMenu(int menu);$/;"	p	signature:(int menu)
glutDestroyWindow	.\glut.h	/^GLUTAPI void APIENTRY glutDestroyWindow(int win);$/;"	p	signature:(int win)
glutDetachMenu	.\glut.h	/^GLUTAPI void APIENTRY glutDetachMenu(int button);$/;"	p	signature:(int button)
glutDeviceGet	.\glut.h	/^GLUTAPI int APIENTRY glutDeviceGet(GLenum type);$/;"	p	signature:(GLenum type)
glutDialsFunc	.\glut.h	/^GLUTAPI void APIENTRY glutDialsFunc(void (GLUTCALLBACK *func)(int dial, int value));$/;"	p	signature:(void (GLUTCALLBACK *func)(int dial, int value))
glutDisplayFunc	.\glut.h	/^GLUTAPI void APIENTRY glutDisplayFunc(void (GLUTCALLBACK *func)(void));$/;"	p	signature:(void (GLUTCALLBACK *func)(void))
glutEnterGameMode	.\glut.h	/^GLUTAPI int APIENTRY glutEnterGameMode(void);$/;"	p	signature:(void)
glutEntryFunc	.\glut.h	/^GLUTAPI void APIENTRY glutEntryFunc(void (GLUTCALLBACK *func)(int state));$/;"	p	signature:(void (GLUTCALLBACK *func)(int state))
glutEstablishOverlay	.\glut.h	/^GLUTAPI void APIENTRY glutEstablishOverlay(void);$/;"	p	signature:(void)
glutExtensionSupported	.\glut.h	/^GLUTAPI int APIENTRY glutExtensionSupported(const char *name);$/;"	p	signature:(const char *name)
glutForceJoystickFunc	.\glut.h	/^GLUTAPI void APIENTRY glutForceJoystickFunc(void);$/;"	p	signature:(void)
glutFullScreen	.\glut.h	/^GLUTAPI void APIENTRY glutFullScreen(void);$/;"	p	signature:(void)
glutGameModeGet	.\glut.h	/^GLUTAPI int APIENTRY glutGameModeGet(GLenum mode);$/;"	p	signature:(GLenum mode)
glutGameModeString	.\glut.h	/^GLUTAPI void APIENTRY glutGameModeString(const char *string);$/;"	p	signature:(const char *string)
glutGet	.\glut.h	/^GLUTAPI int APIENTRY glutGet(GLenum type);$/;"	p	signature:(GLenum type)
glutGetColor	.\glut.h	/^GLUTAPI GLfloat APIENTRY glutGetColor(int ndx, int component);$/;"	p	signature:(int ndx, int component)
glutGetMenu	.\glut.h	/^GLUTAPI int APIENTRY glutGetMenu(void);$/;"	p	signature:(void)
glutGetModifiers	.\glut.h	/^GLUTAPI int APIENTRY glutGetModifiers(void);$/;"	p	signature:(void)
glutGetWindow	.\glut.h	/^GLUTAPI int APIENTRY glutGetWindow(void);$/;"	p	signature:(void)
glutHideOverlay	.\glut.h	/^GLUTAPI void APIENTRY glutHideOverlay(void);$/;"	p	signature:(void)
glutHideWindow	.\glut.h	/^GLUTAPI void APIENTRY glutHideWindow(void);$/;"	p	signature:(void)
glutIconifyWindow	.\glut.h	/^GLUTAPI void APIENTRY glutIconifyWindow(void);$/;"	p	signature:(void)
glutIdleFunc	.\glut.h	/^GLUTAPI void APIENTRY glutIdleFunc(void (GLUTCALLBACK *func)(void));$/;"	p	signature:(void (GLUTCALLBACK *func)(void))
glutIgnoreKeyRepeat	.\glut.h	/^GLUTAPI void APIENTRY glutIgnoreKeyRepeat(int ignore);$/;"	p	signature:(int ignore)
glutInit	.\glut.h	/^GLUTAPI void APIENTRY glutInit(int *argcp, char **argv);$/;"	p	signature:(int *argcp, char **argv)
glutInit	.\glut.h	487;"	d
glutInitDisplayMode	.\glut.h	/^GLUTAPI void APIENTRY glutInitDisplayMode(unsigned int mode);$/;"	p	signature:(unsigned int mode)
glutInitDisplayString	.\glut.h	/^GLUTAPI void APIENTRY glutInitDisplayString(const char *string);$/;"	p	signature:(const char *string)
glutInitWindowPosition	.\glut.h	/^GLUTAPI void APIENTRY glutInitWindowPosition(int x, int y);$/;"	p	signature:(int x, int y)
glutInitWindowSize	.\glut.h	/^GLUTAPI void APIENTRY glutInitWindowSize(int width, int height);$/;"	p	signature:(int width, int height)
glutInit_ATEXIT_HACK	.\glut.h	/^static void APIENTRY glutInit_ATEXIT_HACK(int *argcp, char **argv) { __glutInitWithExit(argcp, argv, exit); }$/;"	f	signature:(int *argcp, char **argv)
glutJoystickFunc	.\glut.h	/^GLUTAPI void APIENTRY glutJoystickFunc(void (GLUTCALLBACK *func)(unsigned int buttonMask, int x, int y, int z), int pollInterval);$/;"	p	signature:(void (GLUTCALLBACK *func)(unsigned int buttonMask, int x, int y, int z), int pollInterval)
glutKeyboardFunc	.\glut.h	/^GLUTAPI void APIENTRY glutKeyboardFunc(void (GLUTCALLBACK *func)(unsigned char key, int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(unsigned char key, int x, int y))
glutKeyboardUpFunc	.\glut.h	/^GLUTAPI void APIENTRY glutKeyboardUpFunc(void (GLUTCALLBACK *func)(unsigned char key, int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(unsigned char key, int x, int y))
glutLayerGet	.\glut.h	/^GLUTAPI int APIENTRY glutLayerGet(GLenum type);$/;"	p	signature:(GLenum type)
glutLeaveGameMode	.\glut.h	/^GLUTAPI void APIENTRY glutLeaveGameMode(void);$/;"	p	signature:(void)
glutMainLoop	.\glut.h	/^GLUTAPI void APIENTRY glutMainLoop(void);$/;"	p	signature:(void)
glutMenuStateFunc	.\glut.h	/^GLUTAPI void APIENTRY glutMenuStateFunc(void (GLUTCALLBACK *func)(int state));$/;"	p	signature:(void (GLUTCALLBACK *func)(int state))
glutMenuStatusFunc	.\glut.h	/^GLUTAPI void APIENTRY glutMenuStatusFunc(void (GLUTCALLBACK *func)(int status, int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(int status, int x, int y))
glutMotionFunc	.\glut.h	/^GLUTAPI void APIENTRY glutMotionFunc(void (GLUTCALLBACK *func)(int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(int x, int y))
glutMouseFunc	.\glut.h	/^GLUTAPI void APIENTRY glutMouseFunc(void (GLUTCALLBACK *func)(int button, int state, int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(int button, int state, int x, int y))
glutOverlayDisplayFunc	.\glut.h	/^GLUTAPI void APIENTRY glutOverlayDisplayFunc(void (GLUTCALLBACK *func)(void));$/;"	p	signature:(void (GLUTCALLBACK *func)(void))
glutPassiveMotionFunc	.\glut.h	/^GLUTAPI void APIENTRY glutPassiveMotionFunc(void (GLUTCALLBACK *func)(int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(int x, int y))
glutPopWindow	.\glut.h	/^GLUTAPI void APIENTRY glutPopWindow(void);$/;"	p	signature:(void)
glutPositionWindow	.\glut.h	/^GLUTAPI void APIENTRY glutPositionWindow(int x, int y);$/;"	p	signature:(int x, int y)
glutPostOverlayRedisplay	.\glut.h	/^GLUTAPI void APIENTRY glutPostOverlayRedisplay(void);$/;"	p	signature:(void)
glutPostRedisplay	.\glut.h	/^GLUTAPI void APIENTRY glutPostRedisplay(void);$/;"	p	signature:(void)
glutPostWindowOverlayRedisplay	.\glut.h	/^GLUTAPI void APIENTRY glutPostWindowOverlayRedisplay(int win);$/;"	p	signature:(int win)
glutPostWindowRedisplay	.\glut.h	/^GLUTAPI void APIENTRY glutPostWindowRedisplay(int win);$/;"	p	signature:(int win)
glutPushWindow	.\glut.h	/^GLUTAPI void APIENTRY glutPushWindow(void);$/;"	p	signature:(void)
glutRemoveMenuItem	.\glut.h	/^GLUTAPI void APIENTRY glutRemoveMenuItem(int item);$/;"	p	signature:(int item)
glutRemoveOverlay	.\glut.h	/^GLUTAPI void APIENTRY glutRemoveOverlay(void);$/;"	p	signature:(void)
glutReportErrors	.\glut.h	/^GLUTAPI void APIENTRY glutReportErrors(void);$/;"	p	signature:(void)
glutReshapeFunc	.\glut.h	/^GLUTAPI void APIENTRY glutReshapeFunc(void (GLUTCALLBACK *func)(int width, int height));$/;"	p	signature:(void (GLUTCALLBACK *func)(int width, int height))
glutReshapeWindow	.\glut.h	/^GLUTAPI void APIENTRY glutReshapeWindow(int width, int height);$/;"	p	signature:(int width, int height)
glutSetColor	.\glut.h	/^GLUTAPI void APIENTRY glutSetColor(int, GLfloat red, GLfloat green, GLfloat blue);$/;"	p	signature:(int, GLfloat red, GLfloat green, GLfloat blue)
glutSetCursor	.\glut.h	/^GLUTAPI void APIENTRY glutSetCursor(int cursor);$/;"	p	signature:(int cursor)
glutSetIconTitle	.\glut.h	/^GLUTAPI void APIENTRY glutSetIconTitle(const char *title);$/;"	p	signature:(const char *title)
glutSetKeyRepeat	.\glut.h	/^GLUTAPI void APIENTRY glutSetKeyRepeat(int repeatMode);$/;"	p	signature:(int repeatMode)
glutSetMenu	.\glut.h	/^GLUTAPI void APIENTRY glutSetMenu(int menu);$/;"	p	signature:(int menu)
glutSetWindow	.\glut.h	/^GLUTAPI void APIENTRY glutSetWindow(int win);$/;"	p	signature:(int win)
glutSetWindowTitle	.\glut.h	/^GLUTAPI void APIENTRY glutSetWindowTitle(const char *title);$/;"	p	signature:(const char *title)
glutSetupVideoResizing	.\glut.h	/^GLUTAPI void APIENTRY glutSetupVideoResizing(void);$/;"	p	signature:(void)
glutShowOverlay	.\glut.h	/^GLUTAPI void APIENTRY glutShowOverlay(void);$/;"	p	signature:(void)
glutShowWindow	.\glut.h	/^GLUTAPI void APIENTRY glutShowWindow(void);$/;"	p	signature:(void)
glutSolidCone	.\glut.h	/^GLUTAPI void APIENTRY glutSolidCone(GLdouble base, GLdouble height, GLint slices, GLint stacks);$/;"	p	signature:(GLdouble base, GLdouble height, GLint slices, GLint stacks)
glutSolidCube	.\glut.h	/^GLUTAPI void APIENTRY glutSolidCube(GLdouble size);$/;"	p	signature:(GLdouble size)
glutSolidDodecahedron	.\glut.h	/^GLUTAPI void APIENTRY glutSolidDodecahedron(void);$/;"	p	signature:(void)
glutSolidIcosahedron	.\glut.h	/^GLUTAPI void APIENTRY glutSolidIcosahedron(void);$/;"	p	signature:(void)
glutSolidOctahedron	.\glut.h	/^GLUTAPI void APIENTRY glutSolidOctahedron(void);$/;"	p	signature:(void)
glutSolidSphere	.\glut.h	/^GLUTAPI void APIENTRY glutSolidSphere(GLdouble radius, GLint slices, GLint stacks);$/;"	p	signature:(GLdouble radius, GLint slices, GLint stacks)
glutSolidTeapot	.\glut.h	/^GLUTAPI void APIENTRY glutSolidTeapot(GLdouble size);$/;"	p	signature:(GLdouble size)
glutSolidTetrahedron	.\glut.h	/^GLUTAPI void APIENTRY glutSolidTetrahedron(void);$/;"	p	signature:(void)
glutSolidTorus	.\glut.h	/^GLUTAPI void APIENTRY glutSolidTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings);$/;"	p	signature:(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings)
glutSpaceballButtonFunc	.\glut.h	/^GLUTAPI void APIENTRY glutSpaceballButtonFunc(void (GLUTCALLBACK *func)(int button, int state));$/;"	p	signature:(void (GLUTCALLBACK *func)(int button, int state))
glutSpaceballMotionFunc	.\glut.h	/^GLUTAPI void APIENTRY glutSpaceballMotionFunc(void (GLUTCALLBACK *func)(int x, int y, int z));$/;"	p	signature:(void (GLUTCALLBACK *func)(int x, int y, int z))
glutSpaceballRotateFunc	.\glut.h	/^GLUTAPI void APIENTRY glutSpaceballRotateFunc(void (GLUTCALLBACK *func)(int x, int y, int z));$/;"	p	signature:(void (GLUTCALLBACK *func)(int x, int y, int z))
glutSpecialFunc	.\glut.h	/^GLUTAPI void APIENTRY glutSpecialFunc(void (GLUTCALLBACK *func)(int key, int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(int key, int x, int y))
glutSpecialUpFunc	.\glut.h	/^GLUTAPI void APIENTRY glutSpecialUpFunc(void (GLUTCALLBACK *func)(int key, int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(int key, int x, int y))
glutStopVideoResizing	.\glut.h	/^GLUTAPI void APIENTRY glutStopVideoResizing(void);$/;"	p	signature:(void)
glutStrokeCharacter	.\glut.h	/^GLUTAPI void APIENTRY glutStrokeCharacter(void *font, int character);$/;"	p	signature:(void *font, int character)
glutStrokeLength	.\glut.h	/^GLUTAPI int APIENTRY glutStrokeLength(void *font, const unsigned char *string);$/;"	p	signature:(void *font, const unsigned char *string)
glutStrokeMonoRoman	.\glut.h	/^GLUTAPI void *glutStrokeMonoRoman;$/;"	v
glutStrokeRoman	.\glut.h	/^GLUTAPI void *glutStrokeRoman;$/;"	v
glutStrokeWidth	.\glut.h	/^GLUTAPI int APIENTRY glutStrokeWidth(void *font, int character);$/;"	p	signature:(void *font, int character)
glutSwapBuffers	.\glut.h	/^GLUTAPI void APIENTRY glutSwapBuffers(void);$/;"	p	signature:(void)
glutTabletButtonFunc	.\glut.h	/^GLUTAPI void APIENTRY glutTabletButtonFunc(void (GLUTCALLBACK *func)(int button, int state, int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(int button, int state, int x, int y))
glutTabletMotionFunc	.\glut.h	/^GLUTAPI void APIENTRY glutTabletMotionFunc(void (GLUTCALLBACK *func)(int x, int y));$/;"	p	signature:(void (GLUTCALLBACK *func)(int x, int y))
glutTimerFunc	.\glut.h	/^GLUTAPI void APIENTRY glutTimerFunc(unsigned int millis, void (GLUTCALLBACK *func)(int value), int value);$/;"	p	signature:(unsigned int millis, void (GLUTCALLBACK *func)(int value), int value)
glutUseLayer	.\glut.h	/^GLUTAPI void APIENTRY glutUseLayer(GLenum layer);$/;"	p	signature:(GLenum layer)
glutVideoPan	.\glut.h	/^GLUTAPI void APIENTRY glutVideoPan(int x, int y, int width, int height);$/;"	p	signature:(int x, int y, int width, int height)
glutVideoResize	.\glut.h	/^GLUTAPI void APIENTRY glutVideoResize(int x, int y, int width, int height);$/;"	p	signature:(int x, int y, int width, int height)
glutVideoResizeGet	.\glut.h	/^GLUTAPI int APIENTRY glutVideoResizeGet(GLenum param);$/;"	p	signature:(GLenum param)
glutVisibilityFunc	.\glut.h	/^GLUTAPI void APIENTRY glutVisibilityFunc(void (GLUTCALLBACK *func)(int state));$/;"	p	signature:(void (GLUTCALLBACK *func)(int state))
glutWarpPointer	.\glut.h	/^GLUTAPI void APIENTRY glutWarpPointer(int x, int y);$/;"	p	signature:(int x, int y)
glutWindowStatusFunc	.\glut.h	/^GLUTAPI void APIENTRY glutWindowStatusFunc(void (GLUTCALLBACK *func)(int state));$/;"	p	signature:(void (GLUTCALLBACK *func)(int state))
glutWireCone	.\glut.h	/^GLUTAPI void APIENTRY glutWireCone(GLdouble base, GLdouble height, GLint slices, GLint stacks);$/;"	p	signature:(GLdouble base, GLdouble height, GLint slices, GLint stacks)
glutWireCube	.\glut.h	/^GLUTAPI void APIENTRY glutWireCube(GLdouble size);$/;"	p	signature:(GLdouble size)
glutWireDodecahedron	.\glut.h	/^GLUTAPI void APIENTRY glutWireDodecahedron(void);$/;"	p	signature:(void)
glutWireIcosahedron	.\glut.h	/^GLUTAPI void APIENTRY glutWireIcosahedron(void);$/;"	p	signature:(void)
glutWireOctahedron	.\glut.h	/^GLUTAPI void APIENTRY glutWireOctahedron(void);$/;"	p	signature:(void)
glutWireSphere	.\glut.h	/^GLUTAPI void APIENTRY glutWireSphere(GLdouble radius, GLint slices, GLint stacks);$/;"	p	signature:(GLdouble radius, GLint slices, GLint stacks)
glutWireTeapot	.\glut.h	/^GLUTAPI void APIENTRY glutWireTeapot(GLdouble size);$/;"	p	signature:(GLdouble size)
glutWireTetrahedron	.\glut.h	/^GLUTAPI void APIENTRY glutWireTetrahedron(void);$/;"	p	signature:(void)
glutWireTorus	.\glut.h	/^GLUTAPI void APIENTRY glutWireTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings);$/;"	p	signature:(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings)
